import{_ as i,W as s,X as o,Y as e,Z as n,a2 as a,$ as t,a5 as d,D as c}from"./framework-4c9bc095.js";const h={},l=e("h1",{id:"class-listrbaserenderer",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#class-listrbaserenderer","aria-hidden":"true"},"#"),t(" Class: ListrBaseRenderer")],-1),p=e("p",null,"Exported for javascript applications to extend the base renderer",-1),f=e("h2",{id:"implements",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#implements","aria-hidden":"true"},"#"),t(" Implements")],-1),u=e("code",null,"ListrRenderer",-1),_=d('<h2 id="properties" tabindex="-1"><a class="header-anchor" href="#properties" aria-hidden="true">#</a> Properties</h2><h3 id="rendereroptions" tabindex="-1"><a class="header-anchor" href="#rendereroptions" aria-hidden="true">#</a> rendererOptions</h3><p>▪ <code>Static</code> <strong>rendererOptions</strong>: <code>Record</code>&lt;<code>PropertyKey</code>, <code>any</code>&gt;</p><p>designate renderer global options that is specific to the current renderer</p><h4 id="implementation-of" tabindex="-1"><a class="header-anchor" href="#implementation-of" aria-hidden="true">#</a> Implementation of</h4>',5),m=d('<h4 id="defined-in" tabindex="-1"><a class="header-anchor" href="#defined-in" aria-hidden="true">#</a> Defined in</h4><p>src/interfaces/renderer.interface.ts:120</p><hr><h3 id="renderertaskoptions" tabindex="-1"><a class="header-anchor" href="#renderertaskoptions" aria-hidden="true">#</a> rendererTaskOptions</h3><p>▪ <code>Static</code> <strong>rendererTaskOptions</strong>: <code>Record</code>&lt;<code>PropertyKey</code>, <code>any</code>&gt;</p><p>designate renderer per task options that is specific to the current renderer</p><h4 id="implementation-of-1" tabindex="-1"><a class="header-anchor" href="#implementation-of-1" aria-hidden="true">#</a> Implementation of</h4>',7),x=d('<h4 id="defined-in-1" tabindex="-1"><a class="header-anchor" href="#defined-in-1" aria-hidden="true">#</a> Defined in</h4><p>src/interfaces/renderer.interface.ts:122</p><hr><h3 id="nontty" tabindex="-1"><a class="header-anchor" href="#nontty" aria-hidden="true">#</a> nonTTY</h3><p>▪ <code>Static</code> <strong>nonTTY</strong>: <code>boolean</code></p><p>designate whether this renderer can work in non-tty environments</p><h4 id="implementation-of-2" tabindex="-1"><a class="header-anchor" href="#implementation-of-2" aria-hidden="true">#</a> Implementation of</h4>',7),b=e("h4",{id:"defined-in-2",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-2","aria-hidden":"true"},"#"),t(" Defined in")],-1),y=e("p",null,"src/interfaces/renderer.interface.ts:124",-1),g=e("hr",null,null,-1),L=e("h3",{id:"tasks",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#tasks","aria-hidden":"true"},"#"),t(" tasks")],-1),R=e("strong",null,"tasks",-1),k=e("code",null,"ListrTaskObject",-1),v=e("code",null,"any",-1),T=e("code",null,"ListrBaseRenderer",-1),B=d('<h4 id="defined-in-3" tabindex="-1"><a class="header-anchor" href="#defined-in-3" aria-hidden="true">#</a> Defined in</h4><p>src/interfaces/renderer.interface.ts:125</p><hr><h3 id="options" tabindex="-1"><a class="header-anchor" href="#options" aria-hidden="true">#</a> options</h3><p>• <strong>options</strong>: <code>Record</code>&lt;<code>PropertyKey</code>, <code>any</code>&gt;</p><h4 id="defined-in-4" tabindex="-1"><a class="header-anchor" href="#defined-in-4" aria-hidden="true">#</a> Defined in</h4><p>src/interfaces/renderer.interface.ts:126</p><hr><h3 id="render" tabindex="-1"><a class="header-anchor" href="#render" aria-hidden="true">#</a> render</h3><p>• <strong>render</strong>: () =&gt; <code>void</code> | <code>Promise</code>&lt;<code>void</code>&gt;</p><h4 id="type-declaration" tabindex="-1"><a class="header-anchor" href="#type-declaration" aria-hidden="true">#</a> Type declaration</h4><p>▸ (): <code>void</code> | <code>Promise</code>&lt;<code>void</code>&gt;</p><p>A function to what to do on render</p><h5 id="returns" tabindex="-1"><a class="header-anchor" href="#returns" aria-hidden="true">#</a> Returns</h5><p><code>void</code> | <code>Promise</code>&lt;<code>void</code>&gt;</p><h4 id="implementation-of-3" tabindex="-1"><a class="header-anchor" href="#implementation-of-3" aria-hidden="true">#</a> Implementation of</h4>',16),O=d('<h4 id="defined-in-5" tabindex="-1"><a class="header-anchor" href="#defined-in-5" aria-hidden="true">#</a> Defined in</h4><p>src/interfaces/renderer.interface.ts:128</p><hr><h3 id="end" tabindex="-1"><a class="header-anchor" href="#end" aria-hidden="true">#</a> end</h3><p>• <strong>end</strong>: (<code>err?</code>: <code>Error</code>) =&gt; <code>void</code></p><h4 id="type-declaration-1" tabindex="-1"><a class="header-anchor" href="#type-declaration-1" aria-hidden="true">#</a> Type declaration</h4><p>▸ (<code>err?</code>): <code>void</code></p><p>A function to what to do on end of the render</p><h5 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters" aria-hidden="true">#</a> Parameters</h5><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>err?</code></td><td style="text-align:left;"><code>Error</code></td></tr></tbody></table><h5 id="returns-1" tabindex="-1"><a class="header-anchor" href="#returns-1" aria-hidden="true">#</a> Returns</h5><p><code>void</code></p><h4 id="implementation-of-4" tabindex="-1"><a class="header-anchor" href="#implementation-of-4" aria-hidden="true">#</a> Implementation of</h4>',13),P=d('<h4 id="defined-in-6" tabindex="-1"><a class="header-anchor" href="#defined-in-6" aria-hidden="true">#</a> Defined in</h4><p>src/interfaces/renderer.interface.ts:130</p><h2 id="constructors" tabindex="-1"><a class="header-anchor" href="#constructors" aria-hidden="true">#</a> Constructors</h2><h3 id="constructor" tabindex="-1"><a class="header-anchor" href="#constructor" aria-hidden="true">#</a> constructor</h3><p>• <strong>new ListrBaseRenderer</strong>(<code>tasks</code>, <code>options</code>, <code>events?</code>)</p><p>create a new renderer</p><h4 id="parameters-1" tabindex="-1"><a class="header-anchor" href="#parameters-1" aria-hidden="true">#</a> Parameters</h4>',7),D=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type")])],-1),w=e("td",{style:{"text-align":"left"}},[e("code",null,"tasks")],-1),E={style:{"text-align":"left"}},I=e("code",null,"ListrTaskObject",-1),N=e("code",null,"any",-1),j=e("code",null,"ListrBaseRenderer",-1),C=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"options")]),e("td",{style:{"text-align":"left"}},[e("code",null,"Record"),t("<"),e("code",null,"PropertyKey"),t(", "),e("code",null,"any"),t(">")])],-1),K=e("td",{style:{"text-align":"left"}},[e("code",null,"events?")],-1),S={style:{"text-align":"left"}},V=e("code",null,"ListrEventManager",-1),Y=e("h4",{id:"defined-in-7",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-7","aria-hidden":"true"},"#"),t(" Defined in")],-1),A=e("p",null,"src/interfaces/renderer.interface.ts:132",-1);function M(W,X){const r=c("RouterLink");return s(),o("div",null,[l,p,f,e("ul",null,[e("li",null,[n(r,{to:"/api/classes/ListrRenderer.html"},{default:a(()=>[u]),_:1})])]),_,e("p",null,[n(r,{to:"/api/classes/ListrRenderer.html"},{default:a(()=>[t("ListrRenderer")]),_:1}),t("."),n(r,{to:"/api/classes/ListrRenderer.html#rendereroptions"},{default:a(()=>[t("rendererOptions")]),_:1})]),m,e("p",null,[n(r,{to:"/api/classes/ListrRenderer.html"},{default:a(()=>[t("ListrRenderer")]),_:1}),t("."),n(r,{to:"/api/classes/ListrRenderer.html#renderertaskoptions"},{default:a(()=>[t("rendererTaskOptions")]),_:1})]),x,e("p",null,[n(r,{to:"/api/classes/ListrRenderer.html"},{default:a(()=>[t("ListrRenderer")]),_:1}),t("."),n(r,{to:"/api/classes/ListrRenderer.html#nontty"},{default:a(()=>[t("nonTTY")]),_:1})]),b,y,g,L,e("p",null,[t("• "),R,t(": "),n(r,{to:"/api/classes/ListrTaskObject.html"},{default:a(()=>[k]),_:1}),t("<"),v,t(", typeof "),n(r,{to:"/api/classes/ListrBaseRenderer.html"},{default:a(()=>[T]),_:1}),t(">[]")]),B,e("p",null,[n(r,{to:"/api/classes/ListrRenderer.html"},{default:a(()=>[t("ListrRenderer")]),_:1}),t("."),n(r,{to:"/api/classes/ListrRenderer.html#render"},{default:a(()=>[t("render")]),_:1})]),O,e("p",null,[n(r,{to:"/api/classes/ListrRenderer.html"},{default:a(()=>[t("ListrRenderer")]),_:1}),t("."),n(r,{to:"/api/classes/ListrRenderer.html#end"},{default:a(()=>[t("end")]),_:1})]),P,e("table",null,[D,e("tbody",null,[e("tr",null,[w,e("td",E,[t("readonly "),n(r,{to:"/api/classes/ListrTaskObject.html"},{default:a(()=>[I]),_:1}),t("<"),N,t(", typeof "),n(r,{to:"/api/classes/ListrBaseRenderer.html"},{default:a(()=>[j]),_:1}),t(">[]")])]),C,e("tr",null,[K,e("td",S,[n(r,{to:"/api/classes/ListrEventManager.html"},{default:a(()=>[V]),_:1})])])])]),Y,A])}const $=i(h,[["render",M],["__file","ListrBaseRenderer.html.vue"]]);export{$ as default};
