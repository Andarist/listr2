import{_ as n,W as a,X as c,Y as e,$ as t,Z as o,a2 as r,a5 as i,D as d}from"./framework-4c9bc095.js";const p={},u=e("h1",{id:"interface-processoutputrendereroptions",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#interface-processoutputrendereroptions","aria-hidden":"true"},"#"),t(" Interface: ProcessOutputRendererOptions")],-1),l=e("h2",{id:"hierarchy",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#hierarchy","aria-hidden":"true"},"#"),t(" Hierarchy")],-1),h=e("p",null,[e("strong",null,[e("code",null,"ProcessOutputRendererOptions")])],-1),_=e("code",null,"ListrLoggerOptions",-1),f=e("h2",{id:"properties",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#properties","aria-hidden":"true"},"#"),t(" Properties")],-1),O=e("h3",{id:"processoutput",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#processoutput","aria-hidden":"true"},"#"),t(" processOutput")],-1),m=e("code",null,"Optional",-1),g=e("strong",null,"processOutput",-1),x=e("code",null,"ProcessOutput",-1),b=i('<p>Pass your implementation of process output class to write to stdout and stderr.</p><p><strong><code>Default</code></strong></p><p>&#39;ProcessOutput&#39;</p><p><strong><code>Global</code></strong></p><p>global option that can not be temperated with subtasks</p><h4 id="defined-in" tabindex="-1"><a class="header-anchor" href="#defined-in" aria-hidden="true">#</a> Defined in</h4><p>src/utils/process-output/process-output.interface.ts:10</p>',7);function P(L,R){const s=d("RouterLink");return a(),c("div",null,[u,l,e("ul",null,[e("li",null,[h,e("p",null,[t("↳ "),o(s,{to:"/api/interfaces/ListrLoggerOptions.html"},{default:r(()=>[_]),_:1})])])]),f,O,e("p",null,[t("• "),m,t(),g,t(": "),o(s,{to:"/api/classes/ProcessOutput.html"},{default:r(()=>[x]),_:1})]),b])}const y=n(p,[["render",P],["__file","ProcessOutputRendererOptions.html.vue"]]);export{y as default};
