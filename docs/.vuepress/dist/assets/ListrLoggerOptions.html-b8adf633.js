import{_ as i,W as a,X as d,Y as e,Z as s,a2 as n,$ as t,a5 as r,D as l}from"./framework-4c9bc095.js";const c={},h=e("h1",{id:"interface-listrloggeroptions",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#interface-listrloggeroptions","aria-hidden":"true"},"#"),t(" Interface: ListrLoggerOptions")],-1),u=e("p",null,"Options for the logger",-1),p=e("h2",{id:"hierarchy",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#hierarchy","aria-hidden":"true"},"#"),t(" Hierarchy")],-1),_=e("code",null,"ProcessOutputRendererOptions",-1),f=e("p",null,[t("↳ "),e("strong",null,[e("code",null,"ListrLoggerOptions")])],-1),g=r('<h2 id="properties" tabindex="-1"><a class="header-anchor" href="#properties" aria-hidden="true">#</a> Properties</h2><h3 id="useicons" tabindex="-1"><a class="header-anchor" href="#useicons" aria-hidden="true">#</a> useIcons</h3><p>• <code>Optional</code> <strong>useIcons</strong>: <code>boolean</code></p><p>useIcons instead of text for log level</p><p><strong><code>Default</code></strong></p><p>false</p><h4 id="defined-in" tabindex="-1"><a class="header-anchor" href="#defined-in" aria-hidden="true">#</a> Defined in</h4><p>src/utils/logger/logger.interface.ts:13</p><hr><h3 id="fieldoptions" tabindex="-1"><a class="header-anchor" href="#fieldoptions" aria-hidden="true">#</a> fieldOptions</h3>',10),O=e("code",null,"Optional",-1),m=e("strong",null,"fieldOptions",-1),b=e("code",null,"LoggerFieldOptions",-1),x=e("code",null,"true",-1),L=e("p",null,"Apply fields and templates as presets before and after each message.",-1),y=e("h4",{id:"defined-in-1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-1","aria-hidden":"true"},"#"),t(" Defined in")],-1),P=e("p",null,"src/utils/logger/logger.interface.ts:17",-1),D=e("hr",null,null,-1),v=e("h3",{id:"style",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#style","aria-hidden":"true"},"#"),t(" style")],-1),R=e("code",null,"Optional",-1),k=e("strong",null,"style",-1),I=e("code",null,"ListrLoggerOptionStyle",-1),N=e("code",null,"LogLevels",-1),S=r('<p>Style map for coloring and icons.</p><h4 id="defined-in-2" tabindex="-1"><a class="header-anchor" href="#defined-in-2" aria-hidden="true">#</a> Defined in</h4><p>src/utils/logger/logger.interface.ts:21</p><hr><h3 id="user" tabindex="-1"><a class="header-anchor" href="#user" aria-hidden="true">#</a> user</h3><p>• <code>Optional</code> <strong>user</strong>: <code>any</code></p><p>Pass custom options to user created logger on different environments.</p><p>Not used on the default logger.</p><h4 id="defined-in-3" tabindex="-1"><a class="header-anchor" href="#defined-in-3" aria-hidden="true">#</a> Defined in</h4><p>src/utils/logger/logger.interface.ts:27</p><hr><h3 id="processoutput" tabindex="-1"><a class="header-anchor" href="#processoutput" aria-hidden="true">#</a> processOutput</h3>',12),V=e("code",null,"Optional",-1),w=e("strong",null,"processOutput",-1),B=e("code",null,"ProcessOutput",-1),C=e("p",null,"Pass your implementation of process output class to write to stdout and stderr.",-1),F=e("p",null,[e("strong",null,[e("code",null,"Default")])],-1),A=e("p",null,"'ProcessOutput'",-1),E=e("p",null,[e("strong",null,[e("code",null,"Global")])],-1),G=e("p",null,"global option that can not be temperated with subtasks",-1),H=e("h4",{id:"inherited-from",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#inherited-from","aria-hidden":"true"},"#"),t(" Inherited from")],-1),T=e("h4",{id:"defined-in-4",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-4","aria-hidden":"true"},"#"),t(" Defined in")],-1),W=e("p",null,"src/utils/process-output/process-output.interface.ts:10",-1);function X(Y,Z){const o=l("RouterLink");return a(),d("div",null,[h,u,p,e("ul",null,[e("li",null,[e("p",null,[s(o,{to:"/api/interfaces/ProcessOutputRendererOptions.html"},{default:n(()=>[_]),_:1})]),f])]),g,e("p",null,[t("• "),O,t(),m,t(": "),s(o,{to:"/api/interfaces/LoggerFieldOptions.html"},{default:n(()=>[b]),_:1}),t("<"),x,t(">")]),L,y,P,D,v,e("p",null,[t("• "),R,t(),k,t(": "),s(o,{to:"/api/types/ListrLoggerOptionStyle.html"},{default:n(()=>[I]),_:1}),t("<"),s(o,{to:"/api/enums/LogLevels.html"},{default:n(()=>[N]),_:1}),t(">")]),S,e("p",null,[t("• "),V,t(),w,t(": "),s(o,{to:"/api/classes/ProcessOutput.html"},{default:n(()=>[B]),_:1})]),C,F,A,E,G,H,e("p",null,[s(o,{to:"/api/interfaces/ProcessOutputRendererOptions.html"},{default:n(()=>[t("ProcessOutputRendererOptions")]),_:1}),t("."),s(o,{to:"/api/interfaces/ProcessOutputRendererOptions.html#processoutput"},{default:n(()=>[t("processOutput")]),_:1})]),T,W])}const j=i(c,[["render",X],["__file","ListrLoggerOptions.html.vue"]]);export{j as default};
