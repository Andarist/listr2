import{_ as c,W as r,X as u,a4 as d,Y as n,$ as s,Z as a,a2 as i,a5 as t,D as p}from"./framework-4c9bc095.js";const k={},v=n("p",null,[n("a",{href:"/api/interfaces/ListrTask.html#properties",target:"_blank"},"Task"),s(" can push output while running for informing the user of what is going on or programmatically for more information about an underlying task.")],-1),m={class:"hint-container info"},b=n("p",{class:"hint-container-title"},"Example",-1),h={href:"https://github.com/cenk1cenk2/listr2/tree/master/examples/task-output.example.ts",target:"_blank",rel:"noopener noreferrer"},g=t(`<h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><p>Depending on the renderer selected, the format of the output will change. For <a href="/renderer/default.html" target="_blank">DefaultRenderer</a> everything will be rendered in a small bar just after the task, while for <a href="/renderer/simple.html" target="_blank">SimpleRenderer</a>, <a href="/renderer/verbose.html" target="_blank">VerboseRenderer</a>, or <a href="/renderer/test.html" target="_blank">TestRenderer</a> it will be more like a logger. You can find the individual properties for <a href="/api/interfaces/ListrTask.html#properties" target="_blank">Task</a> <code>output</code> behavior in the next section.</p><h3 id="show-output-through-the-task-itself" tabindex="-1"><a class="header-anchor" href="#show-output-through-the-task-itself" aria-hidden="true">#</a> Show Output Through the Task Itself</h3><p>This will show the output in a small bar that can only show the last output from the task.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> tasks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Listr</span><span class="token punctuation">(</span>
  <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      title<span class="token operator">:</span> <span class="token string">&#39;This task will execute.&#39;</span><span class="token punctuation">,</span>
      task<span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        task<span class="token punctuation">.</span>output <span class="token operator">=</span> <span class="token string">&#39;I will push an output. [0]&#39;</span>
        <span class="token keyword">await</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span>

        task<span class="token punctuation">.</span>output <span class="token operator">=</span> <span class="token string">&#39;I will push an output. [1]&#39;</span>
        <span class="token keyword">await</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span>

        task<span class="token punctuation">.</span>output <span class="token operator">=</span> <span class="token string">&#39;I will push an output. [2]&#39;</span>
        <span class="token keyword">await</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> concurrent<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>
<span class="token punctuation">)</span>

<span class="token keyword">await</span> tasks<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><div class="highlight-line"> </div><br><br><div class="highlight-line"> </div><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="passing-data-through-an-observable-or-a-stream" tabindex="-1"><a class="header-anchor" href="#passing-data-through-an-observable-or-a-stream" aria-hidden="true">#</a> Passing Data Through an Observable or a Stream</h3><p>Since observables and streams are supported they can also be used to generate output.</p>`,7),w={class:"hint-container details"},f=t(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> spawn <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;child_process&#39;</span>
<span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> Readable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;stream&#39;</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> Listr <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;listr2&#39;</span>

<span class="token keyword">const</span> tasks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Listr</span><span class="token punctuation">(</span>
  <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      title<span class="token operator">:</span> <span class="token string">&#39;This task will execute.&#39;</span><span class="token punctuation">,</span>
      task<span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>Readable<span class="token operator">&gt;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">spawn</span><span class="token punctuation">(</span><span class="token string">&#39;ls&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>stdout
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      options<span class="token operator">:</span> <span class="token punctuation">{</span>
        persistentOutput<span class="token operator">:</span> <span class="token boolean">true</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> concurrent<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>
<span class="token punctuation">)</span>

<span class="token keyword">await</span> tasks<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),y={class:"hint-container details"},_=t(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Observable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;rxjs&#39;</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> delay <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@tests/utils&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Listr <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;listr2&#39;</span>

<span class="token keyword">const</span> tasks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Listr</span><span class="token punctuation">(</span>
  <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token comment">// Task can also handle and observable</span>
      title<span class="token operator">:</span> <span class="token string">&#39;Observable test.&#39;</span><span class="token punctuation">,</span>
      task<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Observable<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token operator">=&gt;</span>
        <span class="token keyword">new</span> <span class="token class-name">Observable</span><span class="token punctuation">(</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span>

          <span class="token keyword">void</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
              observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token string">&#39;changed&#39;</span><span class="token punctuation">)</span>

              <span class="token keyword">return</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
              observer<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> concurrent<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>
<span class="token punctuation">)</span>

<span class="token keyword">await</span> tasks<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),x={id:"render-a-writablestream-directly-v2-1-0-31",tabindex:"-1"},L=n("a",{class:"header-anchor",href:"#render-a-writablestream-directly-v2-1-0-31","aria-hidden":"true"},"#",-1),T=n("a",{href:"https://github.com/cenk1cenk2/listr2/issues/31",target:"_blank"},"#31",-1),I=t('<p><code>process.stdout</code> and <code>process.stderr</code> might get hooked depending on the usage of <em>ProcessOutputHook</em> on the selected renderer. So anything that requires a <code>WritableStream</code> while the task running to dump the output, should go through the <a href="/api/classes/Listr.html" target="_blank">Listr</a> itself by creating a temporary <code>WritableStream</code> with <code>task.stdout()</code>.</p><h2 id="renderer" tabindex="-1"><a class="header-anchor" href="#renderer" aria-hidden="true">#</a> Renderer</h2><h3 id="defaultrenderer" tabindex="-1"><a class="header-anchor" href="#defaultrenderer" aria-hidden="true">#</a> <a href="/renderer/default.html" target="_blank">DefaultRenderer</a></h3><h4 id="persistent-output" tabindex="-1"><a class="header-anchor" href="#persistent-output" aria-hidden="true">#</a> Persistent Output</h4><p>To keep the output after the task has been completed while using the default renderer, you can set <code>{ persistentOutput: true }</code> in the <a href="/api/interfaces/ListrTask.html#properties" target="_blank">Task</a> or <a href="/api/classes/Listr.html" target="_blank">Listr</a> renderer options.</p>',5),O={class:"hint-container details"},B=t(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> delay <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@tests/utils&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Listr <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;listr2&#39;</span>

<span class="token keyword">const</span> tasks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Listr</span><span class="token punctuation">(</span>
  <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      title<span class="token operator">:</span> <span class="token string">&#39;This task will execute.&#39;</span><span class="token punctuation">,</span>
      task<span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        task<span class="token punctuation">.</span>output <span class="token operator">=</span> <span class="token string">&#39;I will push an output. [0]&#39;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      options<span class="token operator">:</span> <span class="token punctuation">{</span> persistentOutput<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> concurrent<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>
<span class="token punctuation">)</span>

<span class="token keyword">await</span> tasks<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),S=t('<h4 id="use-the-bottom-bar" tabindex="-1"><a class="header-anchor" href="#use-the-bottom-bar" aria-hidden="true">#</a> Use the Bottom Bar</h4><p>For default renderer, data can be outputted to a bar below all the render area, this is useful for fast moving logs.</p><p>Bottom bar can be selected through <a href="/api/interfaces/ListrTask.html#properties" target="_blank">Task</a> or <a href="/api/classes/Listr.html" target="_blank">Listr</a> renderer options, where it will create a bar at the end of the tasks leaving one line return space in between.</p><p>Item count that is desired to be showed in the bottom bar can be set through the renderer option <code>bottomBar</code> and is per-task.</p><p>The option of persistent output can be combined with this option to persist the output afterwards.</p><ul><li><code>true</code> will only show the last output from the task.</li><li><code>number</code> will limit the output items.</li><li><code>Infinity</code> will keep all the output.</li><li><code>false</code> will use the normal output method.</li></ul>',6),R={class:"hint-container details"},E=t(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> delay <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@tests/utils&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Listr <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;listr2&#39;</span>

<span class="token keyword">const</span> tasks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Listr</span><span class="token punctuation">(</span>
  <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      title<span class="token operator">:</span> <span class="token string">&#39;This task will execute.&#39;</span><span class="token punctuation">,</span>
      task<span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        task<span class="token punctuation">.</span>output <span class="token operator">=</span> <span class="token string">&#39;I will push an output. [0]&#39;</span>
        <span class="token keyword">await</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span>

        task<span class="token punctuation">.</span>output <span class="token operator">=</span> <span class="token string">&#39;I will push an output. [1]&#39;</span>
        <span class="token keyword">await</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span>

        task<span class="token punctuation">.</span>output <span class="token operator">=</span> <span class="token string">&#39;I will push an output. [2]&#39;</span>
        <span class="token keyword">await</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      options<span class="token operator">:</span> <span class="token punctuation">{</span>
        bottomBar<span class="token operator">:</span> <span class="token number">Infinity</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> concurrent<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>
<span class="token punctuation">)</span>

<span class="token keyword">await</span> tasks<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function C(P,D){const l=p("ExternalLinkIcon"),e=p("FontIcon"),o=p("Badge");return r(),u("div",null,[v,d(" more "),n("div",m,[b,n("p",null,[s("You can find the related examples "),n("a",h,[s("here"),a(l)]),s(".")])]),g,n("details",w,[n("summary",null,[a(e,{icon:"material-symbols:code-blocks-outline"}),s(" Code Example — Stream")]),f]),n("details",y,[n("summary",null,[a(e,{icon:"material-symbols:code-blocks-outline"}),s(" Code Example — Observable")]),_]),n("h2",x,[L,s(" Render a WritableStream Directly "),a(o,null,{default:i(()=>[a(e,{icon:"mdi:tag-text-outline"}),s("v2.1.0")]),_:1}),a(o,{type:"warning"},{default:i(()=>[a(e,{icon:"mdi:github"}),T]),_:1})]),I,n("details",O,[n("summary",null,[a(e,{icon:"material-symbols:code-blocks-outline"}),s(" Code Example")]),B]),S,n("details",R,[n("summary",null,[a(e,{icon:"material-symbols:code-blocks-outline"}),s(" Code Example")]),E])])}const N=c(k,[["render",C],["__file","output.html.vue"]]);export{N as default};
