import{_ as i,W as o,X as d,Y as e,Z as n,a2 as a,$ as r,a5 as c,D as s}from"./framework-4c9bc095.js";const l={},h=e("h1",{id:"interface-listroptions-ctx",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#interface-listroptions-ctx","aria-hidden":"true"},"#"),r(" Interface: ListrOptions<Ctx>")],-1),p=e("p",null,"Options to set the behavior of this base task.",-1),f=e("h2",{id:"type-parameters",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#type-parameters","aria-hidden":"true"},"#"),r(" Type parameters")],-1),u=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type")])],-1),g=e("td",{style:{"text-align":"left"}},[e("code",null,"Ctx")],-1),b={style:{"text-align":"left"}},x=e("code",null,"ListrContext",-1),m=e("h2",{id:"hierarchy",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#hierarchy","aria-hidden":"true"},"#"),r(" Hierarchy")],-1),y=e("p",null,[e("strong",null,[e("code",null,"ListrOptions")])],-1),_=e("code",null,"ListrBaseClassOptions",-1),D=c('<h2 id="properties" tabindex="-1"><a class="header-anchor" href="#properties" aria-hidden="true">#</a> Properties</h2><h3 id="ctx" tabindex="-1"><a class="header-anchor" href="#ctx" aria-hidden="true">#</a> ctx</h3><p>• <code>Optional</code> <strong>ctx</strong>: <code>Ctx</code></p><p>To inject a context through this options wrapper. Context can also be defined in run time.</p><p><strong><code>Default</code></strong></p><h4 id="defined-in" tabindex="-1"><a class="header-anchor" href="#defined-in" aria-hidden="true">#</a> Defined in</h4><p>src/interfaces/listr.interface.ts:17</p><hr><h3 id="concurrent" tabindex="-1"><a class="header-anchor" href="#concurrent" aria-hidden="true">#</a> concurrent</h3><p>• <code>Optional</code> <strong>concurrent</strong>: <code>number</code> | <code>boolean</code></p><p>Concurrency sets how many tasks will be run at the same time in parallel.</p><p><strong><code>Default</code></strong></p><p>false &gt; Default is to run everything synchronously.</p><p><code>true</code> will set it to <code>Infinity</code>, <code>false</code> will set it to synchronous.</p><p>If you pass in a <code>number</code> it will limit it to that number.</p><h4 id="defined-in-1" tabindex="-1"><a class="header-anchor" href="#defined-in-1" aria-hidden="true">#</a> Defined in</h4><p>src/interfaces/listr.interface.ts:27</p><hr><h3 id="exitonerror" tabindex="-1"><a class="header-anchor" href="#exitonerror" aria-hidden="true">#</a> exitOnError</h3><p>• <code>Optional</code> <strong>exitOnError</strong>: <code>boolean</code></p><p>Determine the default behavior of exiting on errors.</p><p><strong><code>Default</code></strong></p><p>true &gt; exit on any error coming from the tasks.</p><h4 id="defined-in-2" tabindex="-1"><a class="header-anchor" href="#defined-in-2" aria-hidden="true">#</a> Defined in</h4><p>src/interfaces/listr.interface.ts:33</p><hr><h3 id="exitafterrollback" tabindex="-1"><a class="header-anchor" href="#exitafterrollback" aria-hidden="true">#</a> exitAfterRollback</h3><p>• <code>Optional</code> <strong>exitAfterRollback</strong>: <code>boolean</code></p><p>Determine the behavior of exiting after rollback actions.</p><p>This is independent of exitOnError, since failure of a rollback can be a more critical operation comparing to failing a single task.</p><p><strong><code>Default</code></strong></p><p>true &gt; exit after rolling back tasks</p><h4 id="defined-in-3" tabindex="-1"><a class="header-anchor" href="#defined-in-3" aria-hidden="true">#</a> Defined in</h4><p>src/interfaces/listr.interface.ts:42</p><hr><h3 id="collecterrors" tabindex="-1"><a class="header-anchor" href="#collecterrors" aria-hidden="true">#</a> collectErrors</h3><p>• <code>Optional</code> <strong>collectErrors</strong>: <code>false</code> | <code>&quot;minimal&quot;</code> | <code>&quot;full&quot;</code></p><p>Collects errors to <code>ListrInstance.errors</code></p><p>This can take up a lot of memory, so disabling it can fix out-of-memory errors</p><ul><li>&#39;full&#39; will clone the current context and task in to the error instance</li><li>&#39;minimal&#39; will only collect the error message and the location</li><li>false will collect no errors</li></ul><p><strong><code>Default</code></strong></p><p>&#39;minimal&#39;</p><h4 id="defined-in-4" tabindex="-1"><a class="header-anchor" href="#defined-in-4" aria-hidden="true">#</a> Defined in</h4><p>src/interfaces/listr.interface.ts:54</p><hr><h3 id="registersignallisteners" tabindex="-1"><a class="header-anchor" href="#registersignallisteners" aria-hidden="true">#</a> registerSignalListeners</h3><p>• <code>Optional</code> <strong>registerSignalListeners</strong>: <code>boolean</code></p><p>By default, Listr2 will track SIGINIT signal to update the renderer one last time before completely failing.</p><p><strong><code>Default</code></strong></p><p>true</p><h4 id="defined-in-5" tabindex="-1"><a class="header-anchor" href="#defined-in-5" aria-hidden="true">#</a> Defined in</h4><p>src/interfaces/listr.interface.ts:60</p><hr><h3 id="rendererfallback" tabindex="-1"><a class="header-anchor" href="#rendererfallback" aria-hidden="true">#</a> rendererFallback</h3><p>• <code>Optional</code> <strong>rendererFallback</strong>: <code>boolean</code> | () =&gt; <code>boolean</code></p><p>Determine the certain condition required to use the non-TTY renderer.</p><p><strong><code>Default</code></strong></p><p>null &gt; handled internally</p><h4 id="defined-in-6" tabindex="-1"><a class="header-anchor" href="#defined-in-6" aria-hidden="true">#</a> Defined in</h4><p>src/interfaces/listr.interface.ts:66</p><hr><h3 id="renderersilent" tabindex="-1"><a class="header-anchor" href="#renderersilent" aria-hidden="true">#</a> rendererSilent</h3><p>• <code>Optional</code> <strong>rendererSilent</strong>: <code>boolean</code> | () =&gt; <code>boolean</code></p><p>Determine the certain condition required to use the silent renderer.</p><p><strong><code>Default</code></strong></p><p>null &gt; handled internally</p><h4 id="defined-in-7" tabindex="-1"><a class="header-anchor" href="#defined-in-7" aria-hidden="true">#</a> Defined in</h4><p>src/interfaces/listr.interface.ts:72</p><hr><h3 id="disablecolor" tabindex="-1"><a class="header-anchor" href="#disablecolor" aria-hidden="true">#</a> disableColor</h3><p>• <code>Optional</code> <strong>disableColor</strong>: <code>boolean</code></p><p>Disabling the color, useful for tests and such.</p><p><strong><code>Default</code></strong></p><p>false</p><h4 id="defined-in-8" tabindex="-1"><a class="header-anchor" href="#defined-in-8" aria-hidden="true">#</a> Defined in</h4><p>src/interfaces/listr.interface.ts:78</p><hr><h3 id="forcecolor" tabindex="-1"><a class="header-anchor" href="#forcecolor" aria-hidden="true">#</a> forceColor</h3><p>• <code>Optional</code> <strong>forceColor</strong>: <code>boolean</code></p><p>Forces usage of color.</p><p><strong><code>Default</code></strong></p><p>false</p><h4 id="defined-in-9" tabindex="-1"><a class="header-anchor" href="#defined-in-9" aria-hidden="true">#</a> Defined in</h4><p>src/interfaces/listr.interface.ts:84</p><hr><h3 id="forcetty" tabindex="-1"><a class="header-anchor" href="#forcetty" aria-hidden="true">#</a> forceTTY</h3><p>• <code>Optional</code> <strong>forceTTY</strong>: <code>boolean</code></p><p>Forces TTY stdout eventhough current terminal might not support it.</p><p><strong><code>Default</code></strong></p><p>false</p><h4 id="defined-in-10" tabindex="-1"><a class="header-anchor" href="#defined-in-10" aria-hidden="true">#</a> Defined in</h4><p>src/interfaces/listr.interface.ts:90</p><hr><h3 id="forceunicode" tabindex="-1"><a class="header-anchor" href="#forceunicode" aria-hidden="true">#</a> forceUnicode</h3><p>• <code>Optional</code> <strong>forceUnicode</strong>: <code>boolean</code></p><p>Forces unicode eventhough current terminal might not support it.</p><p><strong><code>Default</code></strong></p><p>false</p><h4 id="defined-in-11" tabindex="-1"><a class="header-anchor" href="#defined-in-11" aria-hidden="true">#</a> Defined in</h4><p>src/interfaces/listr.interface.ts:96</p><hr><h3 id="injectwrapper" tabindex="-1"><a class="header-anchor" href="#injectwrapper" aria-hidden="true">#</a> injectWrapper</h3><p>• <code>Optional</code> <strong>injectWrapper</strong>: <code>Object</code></p><p>Inject data directly to TaskWrapper.</p><h4 id="type-declaration" tabindex="-1"><a class="header-anchor" href="#type-declaration" aria-hidden="true">#</a> Type declaration</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>enquirer?</code></td><td style="text-align:left;"><code>Enquirer</code>&lt;<code>object</code>&gt;</td></tr></tbody></table><h4 id="defined-in-12" tabindex="-1"><a class="header-anchor" href="#defined-in-12" aria-hidden="true">#</a> Defined in</h4><p>src/interfaces/listr.interface.ts:100</p>',108);function k(O,T){const t=s("RouterLink");return o(),d("div",null,[h,p,f,e("table",null,[u,e("tbody",null,[e("tr",null,[g,e("td",b,[n(t,{to:"/api/types/ListrContext.html"},{default:a(()=>[x]),_:1})])])])]),m,e("ul",null,[e("li",null,[y,e("p",null,[r("↳ "),n(t,{to:"/api/interfaces/ListrBaseClassOptions.html"},{default:a(()=>[_]),_:1})])])]),D])}const L=i(l,[["render",k],["__file","ListrOptions.html.vue"]]);export{L as default};
