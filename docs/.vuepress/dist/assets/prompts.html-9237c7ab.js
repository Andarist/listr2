import{_ as l,W as r,X as u,Y as n,$ as s,Z as a,a4 as d,a2 as o,a5 as c,D as i}from"./framework-4c9bc095.js";const k={},v={href:"https://www.npmjs.com/package/enquirer",target:"_blank",rel:"noopener noreferrer"},m=n("div",{class:"hint-container danger"},[n("p",{class:"hint-container-title"},"Warning"),n("p",null,[n("code",null,"enquirer"),s(" is an optional peer dependency. Please install it first.")])],-1),b=n("a",{href:"/api/interfaces/ListrTask.html#properties",target:"_blank"},"Task",-1),h=n("code",null,"task.prompt",-1),g={href:"https://www.npmjs.com/package/enquirer",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"enquirer",-1),y=n("code",null,"enquirer",-1),f=n("p",null,"To get input from the user you can assign the task a new prompt in an async function and write the response to the context.",-1),_=n("div",{class:"hint-container warning"},[n("p",{class:"hint-container-title"},"Note"),n("p",null,"It is not advised to run prompts in concurrent tasks because multiple prompts will clash and overwrite each other's console output and when you do keyboard movements it will apply to them both."),n("p",null,"This has been disabled to do in some renderers, but you are still able to do it with some renderers.")],-1),x={class:"hint-container info"},q=n("p",{class:"hint-container-title"},"Example",-1),T={href:"https://github.com/cenk1cenk2/listr2/tree/master/examples/task-prompt.example.ts",target:"_blank",rel:"noopener noreferrer"},I=n("h2",{id:"usage",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#usage","aria-hidden":"true"},"#"),s(" Usage")],-1),P=n("code",null,"task.prompt",-1),C={href:"https://www.npmjs.com/package/enquirer",target:"_blank",rel:"noopener noreferrer"},E=n("code",null,"enquirer",-1),j={class:"hint-container info"},L=n("p",{class:"hint-container-title"},"Info",-1),D=n("p",null,[s("Please note that I rewrote the types for the "),n("code",null,"enquirer"),s(" and bundle them with this application.")],-1),N=n("code",null,"enquirer",-1),Y=n("a",{href:"https://github.com/cenk1cenk2/listr2/issues/235",target:"_blank"},"#235",-1),S=c(`<h3 id="single-prompt" tabindex="-1"><a class="header-anchor" href="#single-prompt" aria-hidden="true">#</a> Single Prompt</h3><div class="hint-container danger"><p class="hint-container-title">Warning</p><p>I have done a little trick here where, whenever you have just one prompt, then you do not have to name your prompt as in <code>enquirer</code>, it will be automatically named and then returned.</p></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Ctx</span> <span class="token punctuation">{</span>
  input<span class="token operator">:</span> <span class="token builtin">boolean</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> tasks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Listr<span class="token operator">&lt;</span>Ctx<span class="token operator">&gt;</span></span><span class="token punctuation">(</span>
  <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      task<span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span> <span class="token operator">=&gt;</span> ctx<span class="token punctuation">.</span>input <span class="token operator">=</span> <span class="token keyword">await</span> task<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">prompt</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&#39;Toggle&#39;</span><span class="token punctuation">,</span> message<span class="token operator">:</span> <span class="token string">&#39;Do you love me?&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      title<span class="token operator">:</span> <span class="token string">&#39;This task will get your input.&#39;</span><span class="token punctuation">,</span>
      task<span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        ctx<span class="token punctuation">.</span>input <span class="token operator">=</span> <span class="token keyword">await</span> task<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">prompt</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&#39;Toggle&#39;</span><span class="token punctuation">,</span> message<span class="token operator">:</span> <span class="token string">&#39;Do you love me?&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

        <span class="token comment">// do something</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>input <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;:/&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> concurrent<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>
<span class="token punctuation">)</span>

<span class="token keyword">const</span> ctx <span class="token operator">=</span> <span class="token keyword">await</span> tasks<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="multiple-prompts" tabindex="-1"><a class="header-anchor" href="#multiple-prompts" aria-hidden="true">#</a> Multiple Prompts</h3><div class="hint-container warning"><p class="hint-container-title">Note</p><p>If you want to pass in an array of prompts, be careful that you should name them, this is also enforced by Typescript as well. This is not true for single prompts, since they only return a single value, it will be direct gets past to the assigned variable.</p></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Ctx</span> <span class="token punctuation">{</span>
  input<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    first<span class="token operator">:</span> <span class="token builtin">boolean</span>
    second<span class="token operator">:</span> <span class="token builtin">boolean</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> tasks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Listr<span class="token operator">&lt;</span>Ctx<span class="token operator">&gt;</span></span><span class="token punctuation">(</span>
  <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      title<span class="token operator">:</span> <span class="token string">&#39;This task will get your input.&#39;</span><span class="token punctuation">,</span>
      task<span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        ctx<span class="token punctuation">.</span>input <span class="token operator">=</span> <span class="token keyword">await</span> task<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">prompt</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token punctuation">{</span> first<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span> second<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">[</span>
          <span class="token punctuation">{</span>
            type<span class="token operator">:</span> <span class="token string">&#39;Toggle&#39;</span><span class="token punctuation">,</span>
            name<span class="token operator">:</span> <span class="token string">&#39;first&#39;</span><span class="token punctuation">,</span>
            message<span class="token operator">:</span> <span class="token string">&#39;Do you love me?&#39;</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">{</span>
            type<span class="token operator">:</span> <span class="token string">&#39;Toggle&#39;</span><span class="token punctuation">,</span>
            name<span class="token operator">:</span> <span class="token string">&#39;second&#39;</span><span class="token punctuation">,</span>
            message<span class="token operator">:</span> <span class="token string">&#39;Do you love me?&#39;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">]</span><span class="token punctuation">)</span>

        <span class="token comment">// do something</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>input<span class="token punctuation">.</span>first <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          task<span class="token punctuation">.</span>output <span class="token operator">=</span> <span class="token string">&#39;oh okay&#39;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>input<span class="token punctuation">.</span>second <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;You did not had to tell me for the second time&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> concurrent<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>
<span class="token punctuation">)</span>

<span class="token keyword">const</span> ctx <span class="token operator">=</span> <span class="token keyword">await</span> tasks<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="use-a-custom-prompt" tabindex="-1"><a class="header-anchor" href="#use-a-custom-prompt" aria-hidden="true">#</a> Use a Custom Prompt</h3>`,7),W={href:"https://www.npmjs.com/package/enquirer",target:"_blank",rel:"noopener noreferrer"},B=n("code",null,"enquirer",-1),V=c(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> Enquirer <span class="token keyword">from</span> <span class="token string">&#39;enquirer&#39;</span>
<span class="token keyword">import</span> EditorPrompt <span class="token keyword">from</span> <span class="token string">&#39;enquirer-editor&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Listr <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;listr2&#39;</span>

<span class="token keyword">const</span> enquirer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enquirer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
enquirer<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">&#39;editor&#39;</span><span class="token punctuation">,</span> Editor<span class="token punctuation">)</span>

<span class="token keyword">const</span> tasks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Listr<span class="token operator">&lt;</span>Ctx<span class="token operator">&gt;</span></span><span class="token punctuation">(</span>
  <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      title<span class="token operator">:</span> <span class="token string">&#39;Custom prompt&#39;</span><span class="token punctuation">,</span>
      task<span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        ctx<span class="token punctuation">.</span>testInput <span class="token operator">=</span> <span class="token keyword">await</span> task<span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
          type<span class="token operator">:</span> <span class="token string">&#39;editor&#39;</span><span class="token punctuation">,</span>
          message<span class="token operator">:</span> <span class="token string">&#39;Write something in this enquirer custom prompt.&#39;</span><span class="token punctuation">,</span>
          initial<span class="token operator">:</span> <span class="token string">&#39;Start writing!&#39;</span><span class="token punctuation">,</span>
          validate<span class="token operator">:</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token builtin">string</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> concurrent<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> injectWrapper<span class="token operator">:</span> <span class="token punctuation">{</span> enquirer <span class="token punctuation">}</span> <span class="token punctuation">}</span>
<span class="token punctuation">)</span>

<span class="token keyword">const</span> ctx <span class="token operator">=</span> <span class="token keyword">await</span> tasks<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),F={id:"cancel-a-prompt-v3-1-0-173",tabindex:"-1"},R=n("a",{class:"header-anchor",href:"#cancel-a-prompt-v3-1-0-173","aria-hidden":"true"},"#",-1),U=n("a",{href:"https://github.com/cenk1cenk2/listr2/issues/173",target:"_blank"},"#173",-1),z=c(`<p>You can cancel a prompt while it is still active through the <code>cancelPrompt</code> function.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>
<span class="token keyword">interface</span> <span class="token class-name">Ctx</span> <span class="token punctuation">{</span>
  input<span class="token operator">:</span> <span class="token builtin">boolean</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> tasks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Listr<span class="token operator">&lt;</span>Ctx<span class="token operator">&gt;</span></span><span class="token punctuation">(</span>
  <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      title<span class="token operator">:</span> <span class="token string">&#39;This task will get your input.&#39;</span><span class="token punctuation">,</span>
      task<span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// Cancel the prompt after 5 seconds</span>
        <span class="token keyword">void</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> task<span class="token punctuation">.</span><span class="token function">cancelPrompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

        ctx<span class="token punctuation">.</span>input <span class="token operator">=</span> <span class="token keyword">await</span> task<span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
          type<span class="token operator">:</span> <span class="token string">&#39;Input&#39;</span><span class="token punctuation">,</span>
          message<span class="token operator">:</span> <span class="token string">&#39;Give me input before it disappears.&#39;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> concurrent<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>
<span class="token punctuation">)</span>

<span class="token keyword">const</span> ctx <span class="token operator">=</span> <span class="token keyword">await</span> tasks<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="renderer" tabindex="-1"><a class="header-anchor" href="#renderer" aria-hidden="true">#</a> Renderer</h2><p>Prompts, since their output passes through an internal <code>WritableStream</code> as a <code>process.stdout</code> will render multiple times in non-TTY renderers. It will work anyhow albeit it might not look great. Since prompts are not even intended for non-TTY terminals, this is a novelty.</p><h3 id="defaultrenderer" tabindex="-1"><a class="header-anchor" href="#defaultrenderer" aria-hidden="true">#</a> <a href="/renderer/default.html" target="_blank">DefaultRenderer</a></h3><p>Prompts can either have a title or not, but they will always be rendered at the end of the current console output.</p>`,6);function G(M,X){const t=i("ExternalLinkIcon"),e=i("FontIcon"),p=i("Badge");return r(),u("div",null,[n("p",null,[s("The input module uses the beautiful and not very well-maintained (xD) "),n("a",v,[s("enquirer"),a(t)]),s(".")]),m,n("p",null,[s("Inside a "),b,s(", the "),h,s(" function gives you access to any "),n("a",g,[w,a(t)]),s(" default prompts as well as the underlying instance for using a custom "),y,s(" prompt.")]),d(" more "),f,_,n("div",x,[q,n("p",null,[s("You can find the related examples "),n("a",T,[s("here"),a(t)]),s(".")])]),I,n("p",null,[s("To access the prompts just utilize the "),P,s(" jumper function by passing in your "),n("a",C,[E,a(t)]),s(" prompts as an argument.")]),n("div",j,[L,D,n("p",null,[s("So it is highly likely that it has some mistakes in it since I usually do not use all of them. I will merge the original types when the "),N,s(" fixes them with the pending merge request "),a(p,{type:"warning"},{default:o(()=>[a(e,{icon:"mdi:github"}),Y]),_:1}),s(", which can be tracked in issue , which will probably never happen!")])]),S,n("p",null,[s("You can either use a custom prompt out of the npm registry, or a custom-created one as long as it works with the "),n("a",W,[B,a(t)]),s(", it will work as expected. Instead of passing in the prompt name use the not-new-invoked class.")]),V,n("h2",F,[R,s(" Cancel a Prompt "),a(p,null,{default:o(()=>[a(e,{icon:"mdi:tag-text-outline"}),s("v3.1.0")]),_:1}),a(p,{type:"warning"},{default:o(()=>[a(e,{icon:"mdi:github"}),U]),_:1})]),z])}const $=l(k,[["render",G],["__file","prompts.html.vue"]]);export{$ as default};
