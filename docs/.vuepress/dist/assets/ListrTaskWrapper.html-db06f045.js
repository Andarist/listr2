import{_ as n,W as o,X as i,Y as e,$ as t,Z as d,a2 as r,a5 as s,D as l}from"./framework-4c9bc095.js";const h={},c=e("h1",{id:"class-listrtaskwrapper-ctx-renderer",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#class-listrtaskwrapper-ctx-renderer","aria-hidden":"true"},"#"),t(" Class: ListrTaskWrapper<Ctx, Renderer>")],-1),p=e("p",null,"Extend the task to have more functionality while accessing from the outside.",-1),u=e("h2",{id:"type-parameters",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#type-parameters","aria-hidden":"true"},"#"),t(" Type parameters")],-1),_=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type")])],-1),f=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"Ctx")]),e("td",{style:{"text-align":"left"}},[e("code",null,"Ctx")])],-1),x=e("td",{style:{"text-align":"left"}},[e("code",null,"Renderer")],-1),y={style:{"text-align":"left"}},m=e("code",null,"ListrRendererFactory",-1),b=e("h2",{id:"properties",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#properties","aria-hidden":"true"},"#"),t(" Properties")],-1),g=e("h3",{id:"errors",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#errors","aria-hidden":"true"},"#"),t(" errors")],-1),k=e("code",null,"Private",-1),T=e("strong",null,"errors",-1),L=e("code",null,"ListrError",-1),R=e("code",null,"Ctx",-1),w=e("h4",{id:"defined-in",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in","aria-hidden":"true"},"#"),t(" Defined in")],-1),C=e("p",null,"src/lib/task-wrapper.ts:15",-1),P=e("hr",null,null,-1),N=e("h3",{id:"task",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#task","aria-hidden":"true"},"#"),t(" task")],-1),v=e("strong",null,"task",-1),O=e("code",null,"ListrTaskObject",-1),D=e("code",null,"Ctx",-1),E=e("code",null,"ListrRenderer",-1),S=e("h4",{id:"defined-in-1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-1","aria-hidden":"true"},"#"),t(" Defined in")],-1),W=e("p",null,"src/lib/task-wrapper.ts:17",-1),B=e("hr",null,null,-1),j=e("h3",{id:"options",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#options","aria-hidden":"true"},"#"),t(" options")],-1),V=e("code",null,"Private",-1),G=e("strong",null,"options",-1),q=e("code",null,"ListrBaseClassOptions",-1),F=e("code",null,"Ctx",-1),M=e("code",null,"any",-1),U=e("code",null,"any",-1),z=s('<h4 id="defined-in-2" tabindex="-1"><a class="header-anchor" href="#defined-in-2" aria-hidden="true">#</a> Defined in</h4><p>src/lib/task-wrapper.ts:17</p><h2 id="constructors" tabindex="-1"><a class="header-anchor" href="#constructors" aria-hidden="true">#</a> Constructors</h2><h3 id="constructor" tabindex="-1"><a class="header-anchor" href="#constructor" aria-hidden="true">#</a> constructor</h3><p>• <strong>new ListrTaskWrapper</strong>&lt;<code>Ctx</code>, <code>Renderer</code>&gt;(<code>task</code>, <code>options</code>)</p><h4 id="type-parameters-1" tabindex="-1"><a class="header-anchor" href="#type-parameters-1" aria-hidden="true">#</a> Type parameters</h4>',6),A=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type")])],-1),X=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"Ctx")]),e("td",{style:{"text-align":"left"}},[e("code",null,"Ctx")])],-1),Y=e("td",{style:{"text-align":"left"}},[e("code",null,"Renderer")],-1),Z={style:{"text-align":"left"}},$=e("code",null,"ListrRenderer",-1),H=e("h4",{id:"parameters",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#parameters","aria-hidden":"true"},"#"),t(" Parameters")],-1),I=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type")])],-1),J=e("td",{style:{"text-align":"left"}},[e("code",null,"task")],-1),K={style:{"text-align":"left"}},Q=e("code",null,"ListrTaskObject",-1),ee=e("code",null,"Ctx",-1),te=e("code",null,"ListrRenderer",-1),ae=e("td",{style:{"text-align":"left"}},[e("code",null,"options")],-1),de={style:{"text-align":"left"}},re=e("code",null,"ListrBaseClassOptions",-1),se=e("code",null,"Ctx",-1),ne=e("code",null,"any",-1),oe=e("code",null,"any",-1),ie=s('<h4 id="defined-in-3" tabindex="-1"><a class="header-anchor" href="#defined-in-3" aria-hidden="true">#</a> Defined in</h4><p>src/lib/task-wrapper.ts:17</p><h2 id="accessors" tabindex="-1"><a class="header-anchor" href="#accessors" aria-hidden="true">#</a> Accessors</h2><h3 id="title" tabindex="-1"><a class="header-anchor" href="#title" aria-hidden="true">#</a> title</h3><p>• <code>get</code> <strong>title</strong>(): <code>string</code></p><p>Get the title of the current task.</p><h4 id="returns" tabindex="-1"><a class="header-anchor" href="#returns" aria-hidden="true">#</a> Returns</h4><p><code>string</code></p><h4 id="defined-in-4" tabindex="-1"><a class="header-anchor" href="#defined-in-4" aria-hidden="true">#</a> Defined in</h4><p>src/lib/task-wrapper.ts:22</p><p>• <code>set</code> <strong>title</strong>(<code>title</code>): <code>void</code></p><p>Change the title of the current task.</p><h4 id="parameters-1" tabindex="-1"><a class="header-anchor" href="#parameters-1" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>title</code></td><td style="text-align:left;"><code>string</code> | <code>string</code>[]</td></tr></tbody></table><h4 id="returns-1" tabindex="-1"><a class="header-anchor" href="#returns-1" aria-hidden="true">#</a> Returns</h4><p><code>void</code></p><h4 id="defined-in-5" tabindex="-1"><a class="header-anchor" href="#defined-in-5" aria-hidden="true">#</a> Defined in</h4><p>src/lib/task-wrapper.ts:27</p><hr><h3 id="output" tabindex="-1"><a class="header-anchor" href="#output" aria-hidden="true">#</a> output</h3><p>• <code>get</code> <strong>output</strong>(): <code>string</code></p><p>Get the output from the output channel.</p><h4 id="returns-2" tabindex="-1"><a class="header-anchor" href="#returns-2" aria-hidden="true">#</a> Returns</h4><p><code>string</code></p><h4 id="defined-in-6" tabindex="-1"><a class="header-anchor" href="#defined-in-6" aria-hidden="true">#</a> Defined in</h4><p>src/lib/task-wrapper.ts:34</p><p>• <code>set</code> <strong>output</strong>(<code>output</code>): <code>void</code></p><p>Send a output to the output channel.</p><h4 id="parameters-2" tabindex="-1"><a class="header-anchor" href="#parameters-2" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>output</code></td><td style="text-align:left;"><code>string</code> | <code>any</code>[]</td></tr></tbody></table><h4 id="returns-3" tabindex="-1"><a class="header-anchor" href="#returns-3" aria-hidden="true">#</a> Returns</h4><p><code>void</code></p><h4 id="defined-in-7" tabindex="-1"><a class="header-anchor" href="#defined-in-7" aria-hidden="true">#</a> Defined in</h4><p>src/lib/task-wrapper.ts:39</p><hr><h3 id="promptoutput" tabindex="-1"><a class="header-anchor" href="#promptoutput" aria-hidden="true">#</a> promptOutput</h3><p>• <code>Private</code> <code>set</code> <strong>promptOutput</strong>(<code>output</code>): <code>void</code></p><p>Send a output to the output channel.</p><h4 id="parameters-3" tabindex="-1"><a class="header-anchor" href="#parameters-3" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>output</code></td><td style="text-align:left;"><code>string</code></td></tr></tbody></table><h4 id="returns-4" tabindex="-1"><a class="header-anchor" href="#returns-4" aria-hidden="true">#</a> Returns</h4><p><code>void</code></p><h4 id="defined-in-8" tabindex="-1"><a class="header-anchor" href="#defined-in-8" aria-hidden="true">#</a> Defined in</h4><p>src/lib/task-wrapper.ts:46</p><h2 id="methods" tabindex="-1"><a class="header-anchor" href="#methods" aria-hidden="true">#</a> Methods</h2><h3 id="newlistr" tabindex="-1"><a class="header-anchor" href="#newlistr" aria-hidden="true">#</a> newListr</h3>',46),le=e("strong",null,"newListr",-1),he=e("code",null,"NewCtx",-1),ce=e("code",null,"task",-1),pe=e("code",null,"options?",-1),ue=e("code",null,"Listr",-1),_e=e("code",null,"NewCtx",-1),fe=e("code",null,"any",-1),xe=e("code",null,"any",-1),ye=s('<p>Create a new subtask with given renderer selection from the parent task.</p><h4 id="type-parameters-2" tabindex="-1"><a class="header-anchor" href="#type-parameters-2" aria-hidden="true">#</a> Type parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>NewCtx</code></td><td style="text-align:left;"><code>Ctx</code></td></tr></tbody></table><h4 id="parameters-4" tabindex="-1"><a class="header-anchor" href="#parameters-4" aria-hidden="true">#</a> Parameters</h4>',4),me=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type")])],-1),be=e("td",{style:{"text-align":"left"}},[e("code",null,"task")],-1),ge={style:{"text-align":"left"}},ke=e("code",null,"ListrTask",-1),Te=e("code",null,"NewCtx",-1),Le=e("code",null,"Renderer",-1),Re=e("code",null,"ListrTask",-1),we=e("code",null,"NewCtx",-1),Ce=e("code",null,"Renderer",-1),Pe=e("code",null,"parent",-1),Ne=e("code",null,"Omit",-1),ve=e("code",null,"ListrTaskWrapper",-1),Oe=e("code",null,"Ctx",-1),De=e("code",null,"Renderer",-1),Ee=e("code",null,'"skip"',-1),Se=e("code",null,'"enabled"',-1),We=e("code",null,"ListrTask",-1),Be=e("code",null,"NewCtx",-1),je=e("code",null,"Renderer",-1),Ve=e("code",null,"ListrTask",-1),Ge=e("code",null,"NewCtx",-1),qe=e("code",null,"Renderer",-1),Fe=e("td",{style:{"text-align":"left"}},[e("code",null,"options?")],-1),Me={style:{"text-align":"left"}},Ue=e("code",null,"ListrSubClassOptions",-1),ze=e("code",null,"NewCtx",-1),Ae=e("code",null,"Renderer",-1),Xe=e("h4",{id:"returns-5",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#returns-5","aria-hidden":"true"},"#"),t(" Returns")],-1),Ye=e("code",null,"Listr",-1),Ze=e("code",null,"NewCtx",-1),$e=e("code",null,"any",-1),He=e("code",null,"any",-1),Ie=s('<h4 id="defined-in-9" tabindex="-1"><a class="header-anchor" href="#defined-in-9" aria-hidden="true">#</a> Defined in</h4><p>src/lib/task-wrapper.ts:51</p><hr><h3 id="report" tabindex="-1"><a class="header-anchor" href="#report" aria-hidden="true">#</a> report</h3><p>▸ <strong>report</strong>(<code>error</code>, <code>type</code>): <code>void</code></p><p>Report a error in process for error collection.</p><h4 id="parameters-5" tabindex="-1"><a class="header-anchor" href="#parameters-5" aria-hidden="true">#</a> Parameters</h4>',7),Je=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type")])],-1),Ke=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"error")]),e("td",{style:{"text-align":"left"}},[e("code",null,"Error")])],-1),Qe=e("td",{style:{"text-align":"left"}},[e("code",null,"type")],-1),et={style:{"text-align":"left"}},tt=e("code",null,"ListrErrorTypes",-1),at=s('<h4 id="returns-6" tabindex="-1"><a class="header-anchor" href="#returns-6" aria-hidden="true">#</a> Returns</h4><p><code>void</code></p><h4 id="defined-in-10" tabindex="-1"><a class="header-anchor" href="#defined-in-10" aria-hidden="true">#</a> Defined in</h4><p>src/lib/task-wrapper.ts:67</p><hr><h3 id="skip" tabindex="-1"><a class="header-anchor" href="#skip" aria-hidden="true">#</a> skip</h3><p>▸ <strong>skip</strong>(<code>message?</code>, <code>...metadata</code>): <code>void</code></p><p>Skip current task.</p><h4 id="parameters-6" tabindex="-1"><a class="header-anchor" href="#parameters-6" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>message?</code></td><td style="text-align:left;"><code>string</code></td></tr><tr><td style="text-align:left;"><code>...metadata</code></td><td style="text-align:left;"><code>any</code>[]</td></tr></tbody></table><h4 id="returns-7" tabindex="-1"><a class="header-anchor" href="#returns-7" aria-hidden="true">#</a> Returns</h4><p><code>void</code></p><h4 id="defined-in-11" tabindex="-1"><a class="header-anchor" href="#defined-in-11" aria-hidden="true">#</a> Defined in</h4><p>src/lib/task-wrapper.ts:76</p><hr><h3 id="isretrying" tabindex="-1"><a class="header-anchor" href="#isretrying" aria-hidden="true">#</a> isRetrying</h3>',16),dt=e("strong",null,"isRetrying",-1),rt=e("code",null,"ListrTaskRetry",-1),st=e("p",null,"Get the number of retrying, else returns false",-1),nt=e("h4",{id:"returns-8",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#returns-8","aria-hidden":"true"},"#"),t(" Returns")],-1),ot=e("code",null,"ListrTaskRetry",-1),it=s('<h4 id="defined-in-12" tabindex="-1"><a class="header-anchor" href="#defined-in-12" aria-hidden="true">#</a> Defined in</h4><p>src/lib/task-wrapper.ts:85</p><hr><h3 id="prompt" tabindex="-1"><a class="header-anchor" href="#prompt" aria-hidden="true">#</a> prompt</h3><p>▸ <strong>prompt</strong>&lt;<code>T</code>&gt;(<code>options</code>): <code>Promise</code>&lt;<code>T</code>&gt;</p><p>Create a new Enquirer prompt using prompt options.</p><p>Since process.stdout is controlled by Listr, this will passthrough all Enquirer data through internal stdout.</p><h4 id="type-parameters-3" tabindex="-1"><a class="header-anchor" href="#type-parameters-3" aria-hidden="true">#</a> Type parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>T</code></td><td style="text-align:left;"><code>any</code></td></tr></tbody></table><h4 id="parameters-7" tabindex="-1"><a class="header-anchor" href="#parameters-7" aria-hidden="true">#</a> Parameters</h4>',10),lt=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type")])],-1),ht=e("td",{style:{"text-align":"left"}},[e("code",null,"options")],-1),ct={style:{"text-align":"left"}},pt=e("code",null,"PromptOptions",-1),ut=e("code",null,"PromptOptions",-1),_t=e("code",null,"true",-1),ft=s('<h4 id="returns-9" tabindex="-1"><a class="header-anchor" href="#returns-9" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>T</code>&gt;</p><h4 id="defined-in-13" tabindex="-1"><a class="header-anchor" href="#defined-in-13" aria-hidden="true">#</a> Defined in</h4><p>src/lib/task-wrapper.ts:94</p><hr><h3 id="cancelprompt" tabindex="-1"><a class="header-anchor" href="#cancelprompt" aria-hidden="true">#</a> cancelPrompt</h3><p>▸ <strong>cancelPrompt</strong>(<code>options?</code>): <code>void</code></p><p>Cancels the current prompt attach to this task.</p><h4 id="parameters-8" tabindex="-1"><a class="header-anchor" href="#parameters-8" aria-hidden="true">#</a> Parameters</h4>',9),xt=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type")])],-1),yt=e("td",{style:{"text-align":"left"}},[e("code",null,"options?")],-1),mt={style:{"text-align":"left"}},bt=e("code",null,"PromptCancelOptions",-1),gt=s('<h4 id="returns-10" tabindex="-1"><a class="header-anchor" href="#returns-10" aria-hidden="true">#</a> Returns</h4><p><code>void</code></p><h4 id="defined-in-14" tabindex="-1"><a class="header-anchor" href="#defined-in-14" aria-hidden="true">#</a> Defined in</h4><p>src/lib/task-wrapper.ts:100</p><hr><h3 id="stdout" tabindex="-1"><a class="header-anchor" href="#stdout" aria-hidden="true">#</a> stdout</h3><p>▸ <strong>stdout</strong>(<code>type?</code>): <code>WritableStream</code></p><p>Pass stream of data to internal stdout.</p><p>Since Listr2 takes control of process.stdout utilizing the default renderer, any data outputted to process.stdout will corrupt its looks.</p><p>This returns a fake stream to pass any stream inside Listr as task data.</p><h4 id="parameters-9" tabindex="-1"><a class="header-anchor" href="#parameters-9" aria-hidden="true">#</a> Parameters</h4>',11),kt=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type")])],-1),Tt=e("td",{style:{"text-align":"left"}},[e("code",null,"type?")],-1),Lt={style:{"text-align":"left"}},Rt=e("code",null,"PROMPT",-1),wt=e("code",null,"OUTPUT",-1),Ct=s('<h4 id="returns-11" tabindex="-1"><a class="header-anchor" href="#returns-11" aria-hidden="true">#</a> Returns</h4><p><code>WritableStream</code></p><h4 id="defined-in-15" tabindex="-1"><a class="header-anchor" href="#defined-in-15" aria-hidden="true">#</a> Defined in</h4><p>src/lib/task-wrapper.ts:121</p><hr><h3 id="run" tabindex="-1"><a class="header-anchor" href="#run" aria-hidden="true">#</a> run</h3><p>▸ <strong>run</strong>(<code>ctx</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p><p>Run this task.</p><h4 id="parameters-10" tabindex="-1"><a class="header-anchor" href="#parameters-10" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>ctx</code></td><td style="text-align:left;"><code>Ctx</code></td></tr></tbody></table><h4 id="returns-12" tabindex="-1"><a class="header-anchor" href="#returns-12" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>void</code>&gt;</p><h4 id="defined-in-16" tabindex="-1"><a class="header-anchor" href="#defined-in-16" aria-hidden="true">#</a> Defined in</h4><p>src/lib/task-wrapper.ts:142</p>',14);function Pt(Nt,vt){const a=l("RouterLink");return o(),i("div",null,[c,p,u,e("table",null,[_,e("tbody",null,[f,e("tr",null,[x,e("td",y,[t("extends "),d(a,{to:"/api/types/ListrRendererFactory.html"},{default:r(()=>[m]),_:1})])])])]),b,g,e("p",null,[t("• "),k,t(),T,t(": "),d(a,{to:"/api/classes/ListrError.html"},{default:r(()=>[L]),_:1}),t("<"),R,t(">[]")]),w,C,P,N,e("p",null,[t("• "),v,t(": "),d(a,{to:"/api/classes/ListrTaskObject.html"},{default:r(()=>[O]),_:1}),t("<"),D,t(", typeof "),d(a,{to:"/api/classes/ListrRenderer.html"},{default:r(()=>[E]),_:1}),t(">")]),S,W,B,j,e("p",null,[t("• "),V,t(),G,t(": "),d(a,{to:"/api/interfaces/ListrBaseClassOptions.html"},{default:r(()=>[q]),_:1}),t("<"),F,t(", "),M,t(", "),U,t(">")]),z,e("table",null,[A,e("tbody",null,[X,e("tr",null,[Y,e("td",Z,[t("extends typeof "),d(a,{to:"/api/classes/ListrRenderer.html"},{default:r(()=>[$]),_:1})])])])]),H,e("table",null,[I,e("tbody",null,[e("tr",null,[J,e("td",K,[d(a,{to:"/api/classes/ListrTaskObject.html"},{default:r(()=>[Q]),_:1}),t("<"),ee,t(", typeof "),d(a,{to:"/api/classes/ListrRenderer.html"},{default:r(()=>[te]),_:1}),t(">")])]),e("tr",null,[ae,e("td",de,[d(a,{to:"/api/interfaces/ListrBaseClassOptions.html"},{default:r(()=>[re]),_:1}),t("<"),se,t(", "),ne,t(", "),oe,t(">")])])])]),ie,e("p",null,[t("▸ "),le,t("<"),he,t(">("),ce,t(", "),pe,t("): "),d(a,{to:"/api/classes/Listr.html"},{default:r(()=>[ue]),_:1}),t("<"),_e,t(", "),fe,t(", "),xe,t(">")]),ye,e("table",null,[me,e("tbody",null,[e("tr",null,[be,e("td",ge,[d(a,{to:"/api/interfaces/ListrTask.html"},{default:r(()=>[ke]),_:1}),t("<"),Te,t(", "),Le,t("> | "),d(a,{to:"/api/interfaces/ListrTask.html"},{default:r(()=>[Re]),_:1}),t("<"),we,t(", "),Ce,t(">[] | ("),Pe,t(": "),Ne,t("<"),d(a,{to:"/api/classes/ListrTaskWrapper.html"},{default:r(()=>[ve]),_:1}),t("<"),Oe,t(", "),De,t(">, "),Ee,t(" | "),Se,t(">) => "),d(a,{to:"/api/interfaces/ListrTask.html"},{default:r(()=>[We]),_:1}),t("<"),Be,t(", "),je,t("> | "),d(a,{to:"/api/interfaces/ListrTask.html"},{default:r(()=>[Ve]),_:1}),t("<"),Ge,t(", "),qe,t(">[]")])]),e("tr",null,[Fe,e("td",Me,[d(a,{to:"/api/interfaces/ListrSubClassOptions.html"},{default:r(()=>[Ue]),_:1}),t("<"),ze,t(", "),Ae,t(">")])])])]),Xe,e("p",null,[d(a,{to:"/api/classes/Listr.html"},{default:r(()=>[Ye]),_:1}),t("<"),Ze,t(", "),$e,t(", "),He,t(">")]),Ie,e("table",null,[Je,e("tbody",null,[Ke,e("tr",null,[Qe,e("td",et,[d(a,{to:"/api/enums/ListrErrorTypes.html"},{default:r(()=>[tt]),_:1})])])])]),at,e("p",null,[t("▸ "),dt,t("(): "),d(a,{to:"/api/interfaces/ListrTaskRetry.html"},{default:r(()=>[rt]),_:1})]),st,nt,e("p",null,[d(a,{to:"/api/interfaces/ListrTaskRetry.html"},{default:r(()=>[ot]),_:1})]),it,e("table",null,[lt,e("tbody",null,[e("tr",null,[ht,e("td",ct,[d(a,{to:"/api/types/PromptOptions.html"},{default:r(()=>[pt]),_:1}),t(" | "),d(a,{to:"/api/types/PromptOptions.html"},{default:r(()=>[ut]),_:1}),t("<"),_t,t(">[]")])])])]),ft,e("table",null,[xt,e("tbody",null,[e("tr",null,[yt,e("td",mt,[d(a,{to:"/api/interfaces/PromptCancelOptions.html"},{default:r(()=>[bt]),_:1})])])])]),gt,e("table",null,[kt,e("tbody",null,[e("tr",null,[Tt,e("td",Lt,[d(a,{to:"/api/enums/ListrTaskEventType.html#prompt"},{default:r(()=>[Rt]),_:1}),t(" | "),d(a,{to:"/api/enums/ListrTaskEventType.html#output"},{default:r(()=>[wt]),_:1})])])])]),Ct])}const Dt=n(h,[["render",Pt],["__file","ListrTaskWrapper.html.vue"]]);export{Dt as default};
