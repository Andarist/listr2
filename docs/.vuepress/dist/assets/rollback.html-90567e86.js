import{_ as p,W as c,X as r,Z as a,a2 as o,a4 as u,Y as n,$ as s,a5 as d,D as e}from"./framework-4c9bc095.js";const k={},h=n("p",null,[s("Whenever the "),n("a",{href:"/api/interfaces/ListrTask.html#properties",target:"_blank"},"Task"),s(" itself failed or its subtasks have failed, "),n("code",null,"rollback"),s(" will revert anything that needs to be reverted by that uncompleted action. Rollback will only execute if the task itself has been marked as failed and can be defined as the "),n("code",null,"rollback"),s(" property of a task.")],-1),b=n("blockquote",null,[n("p",null,[s("Since when you return a new "),n("a",{href:"/api/classes/Listr.html",target:"_blank"},"Listr"),s(" as a subtask list, it is not the easiest, and most convenient to do something on failure, and each subtask should be handled separately. But this can still be used for singular tasks where some action needs to be reverted if the task does not complete.")])],-1),v=n("a",{href:"https://github.com/cenk1cenk2/listr2/issues/257",target:"_blank"},"#257",-1),m={class:"hint-container info"},g=n("p",{class:"hint-container-title"},"Example",-1),f={href:"https://github.com/cenk1cenk2/listr2/tree/master/examples/task-rollback.example.ts",target:"_blank",rel:"noopener noreferrer"},w=d(`<h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><h3 id="for-subtask" tabindex="-1"><a class="header-anchor" href="#for-subtask" aria-hidden="true">#</a> For <a href="/task/subtasks.html" target="_blank">Subtask</a></h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> tasks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Listr</span><span class="token punctuation">(</span>
  <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      title<span class="token operator">:</span> <span class="token string">&#39;Something with rollback.&#39;</span><span class="token punctuation">,</span>
      task<span class="token operator">:</span> <span class="token punctuation">(</span>_<span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token operator">:</span> Listr <span class="token operator">=&gt;</span>
        task<span class="token punctuation">.</span><span class="token function">newListr</span><span class="token punctuation">(</span>
          <span class="token punctuation">[</span>
            <span class="token punctuation">{</span>
              title<span class="token operator">:</span> <span class="token string">&#39;This task will fail.&#39;</span><span class="token punctuation">,</span>
              task<span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">await</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;This task failed after 2 seconds.&#39;</span><span class="token punctuation">)</span>
              <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span>
              title<span class="token operator">:</span> <span class="token string">&#39;This task will execute.&#39;</span><span class="token punctuation">,</span>
              task<span class="token operator">:</span> <span class="token punctuation">(</span>_<span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                task<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">&#39;I will change my title if this executes.&#39;</span>
              <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token punctuation">{</span> exitOnError<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
      rollback<span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>_<span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        task<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">&#39;I am trying to rollback stuff, previous action failed.&#39;</span>

        <span class="token keyword">await</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>

        task<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">&#39;Doing something other than this.&#39;</span>

        <span class="token keyword">await</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>

        task<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">&#39;Some actions required rollback stuff.&#39;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    concurrent<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    exitOnError<span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span>

<span class="token keyword">await</span> tasks<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="options" tabindex="-1"><a class="header-anchor" href="#options" aria-hidden="true">#</a> Options</h2><p>Rollback, when it fails by default, throws an exception and stops the execution of the upcoming tasks. But this can be overwritten by <code>{ exitAfterRollback: false }</code> option. This is the main Listr option that acts independently of <code>exitOnError</code> since failing the rollback might have worse consequences.</p><h2 id="renderer" tabindex="-1"><a class="header-anchor" href="#renderer" aria-hidden="true">#</a> Renderer</h2><h3 id="defaultrenderer" tabindex="-1"><a class="header-anchor" href="#defaultrenderer" aria-hidden="true">#</a> <a href="/renderer/default.html" target="_blank">DefaultRenderer</a></h3><p>When rollback is activated the default renderer will change the spinner color to bright red, if the rollback successfully concludes then it will be a redback arrow, else it would be like a normal error where it will show the error from the rollback action itself.</p>`,8);function _(y,x){const t=e("FontIcon"),i=e("Badge"),l=e("ExternalLinkIcon");return c(),r("div",null,[h,b,a(i,null,{default:o(()=>[a(t,{icon:"mdi:tag-text-outline"}),s("v3.3.0")]),_:1}),a(i,{type:"warning"},{default:o(()=>[a(t,{icon:"mdi:github"}),v]),_:1}),u(" more "),n("div",m,[g,n("p",null,[s("You can find the related examples "),n("a",f,[s("here"),a(l)]),s(".")])]),w])}const E=p(k,[["render",_],["__file","rollback.html.vue"]]);export{E as default};
