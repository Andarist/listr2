import{_ as d,W as s,X as i,a4 as h,Y as e,Z as n,a2 as a,$ as t,a5 as o,D as l}from"./framework-4c9bc095.js";const c={},p=e("p",null,[e("a",{href:"/renderer/default.html",target:"_blank"},"DefaultRenderer"),t(" is the main renderer of "),e("code",null,"listr2"),t(" and has been on showcase in the entry image.")],-1),u=o('<p><a href="/renderer/default.html" target="_blank">DefaultRenderer</a> is intended for <code>TTY</code> environments with <code>vt100</code> terminal compatibility, where it updates the current update constantly depending on the changes in <a href="/api/interfaces/ListrTask.html#properties" target="_blank">Task</a>. This renderer has many options for customization, these options can be changed at <a href="/api/classes/Listr.html" target="_blank">Listr</a>, <a href="/task/subtasks.html" target="_blank">Subtask</a> or <a href="/api/interfaces/ListrTask.html#properties" target="_blank">Task</a> level.</p><p>This renderer uses <em>ProcessOutputHook</em> to take control of the terminal.</p><h2 id="renderer-options" tabindex="-1"><a class="header-anchor" href="#renderer-options" aria-hidden="true">#</a> Renderer Options</h2>',3),f={class:"hint-container details"},g=e("summary",null,"Details",-1),_=e("h1",{id:"interface-defaultrendereroptions",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#interface-defaultrendereroptions","aria-hidden":"true"},"#"),t(" Interface: DefaultRendererOptions")],-1),m=e("h2",{id:"hierarchy",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#hierarchy","aria-hidden":"true"},"#"),t(" Hierarchy")],-1),b=e("code",null,"RendererPresetTimer",-1),k=e("code",null,"LoggerRendererOptions",-1),x=e("p",null,[t("↳ "),e("strong",null,[e("code",null,"DefaultRendererOptions")])],-1),w=e("h2",{id:"properties",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#properties","aria-hidden":"true"},"#"),t(" Properties")],-1),O=e("h3",{id:"timer",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#timer","aria-hidden":"true"},"#"),t(" timer")],-1),y=e("code",null,"Optional",-1),D=e("strong",null,"timer",-1),R=e("code",null,"PresetTimer",-1),T=e("p",null,"show duration for all tasks",-1),L=e("p",null,[e("strong",null,[e("code",null,"Default")])],-1),P=e("p",null,"false",-1),v=e("p",null,[e("strong",null,[e("code",null,"Global")])],-1),S=e("p",null,"global option that can not be temperated with subtasks",-1),E=e("h4",{id:"inherited-from",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#inherited-from","aria-hidden":"true"},"#"),t(" Inherited from")],-1),I=o('<h4 id="defined-in" tabindex="-1"><a class="header-anchor" href="#defined-in" aria-hidden="true">#</a> Defined in</h4><p>src/presets/timer/preset.interface.ts:12</p><hr><h3 id="indentation" tabindex="-1"><a class="header-anchor" href="#indentation" aria-hidden="true">#</a> indentation</h3><p>• <code>Optional</code> <strong>indentation</strong>: <code>number</code></p><p>indentation per level of subtask</p><p><strong><code>Default</code></strong></p><p>2</p><h4 id="defined-in-1" tabindex="-1"><a class="header-anchor" href="#defined-in-1" aria-hidden="true">#</a> Defined in</h4><p>src/renderer/default/renderer.interface.ts:19</p><hr><h3 id="clearoutput" tabindex="-1"><a class="header-anchor" href="#clearoutput" aria-hidden="true">#</a> clearOutput</h3><p>• <code>Optional</code> <strong>clearOutput</strong>: <code>boolean</code></p><p>clear all the output generated by the renderer when the task finishes its execution</p><p><strong><code>Default</code></strong></p><p>false</p><p><strong><code>Global</code></strong></p><p>global option that can not be temperated with subtasks</p><h4 id="defined-in-2" tabindex="-1"><a class="header-anchor" href="#defined-in-2" aria-hidden="true">#</a> Defined in</h4><p>src/renderer/default/renderer.interface.ts:26</p><hr><h3 id="showsubtasks" tabindex="-1"><a class="header-anchor" href="#showsubtasks" aria-hidden="true">#</a> showSubtasks</h3><p>• <code>Optional</code> <strong>showSubtasks</strong>: <code>boolean</code></p><p>show the subtasks of the current task</p><p><strong><code>Default</code></strong></p><p>true</p><h4 id="defined-in-3" tabindex="-1"><a class="header-anchor" href="#defined-in-3" aria-hidden="true">#</a> Defined in</h4><p>src/renderer/default/renderer.interface.ts:32</p><hr><h3 id="collapse" tabindex="-1"><a class="header-anchor" href="#collapse" aria-hidden="true">#</a> collapse</h3><p>• <code>Optional</code> <strong>collapse</strong>: <code>boolean</code></p><p>collapse subtasks after current task completes its execution</p><p><strong><code>Default</code></strong></p><p>true</p><h4 id="defined-in-4" tabindex="-1"><a class="header-anchor" href="#defined-in-4" aria-hidden="true">#</a> Defined in</h4><p>src/renderer/default/renderer.interface.ts:38</p><hr><h3 id="showskipmessage" tabindex="-1"><a class="header-anchor" href="#showskipmessage" aria-hidden="true">#</a> showSkipMessage</h3><p>• <code>Optional</code> <strong>showSkipMessage</strong>: <code>boolean</code></p><p>show skip messages or show the original title of the task, this will also disable collapseSkips mode</p><p>You can disable showing the skip messages, even though you passed in a message by settings this option, if you want to keep the original task title intact.</p><p><strong><code>Default</code></strong></p><p>true</p><h4 id="defined-in-5" tabindex="-1"><a class="header-anchor" href="#defined-in-5" aria-hidden="true">#</a> Defined in</h4><p>src/renderer/default/renderer.interface.ts:47</p><hr><h3 id="collapseskips" tabindex="-1"><a class="header-anchor" href="#collapseskips" aria-hidden="true">#</a> collapseSkips</h3><p>• <code>Optional</code> <strong>collapseSkips</strong>: <code>boolean</code></p><p>collapse skip messages into a single message and overwrite the task title</p><p><strong><code>Default</code></strong></p><p>true</p><h4 id="defined-in-6" tabindex="-1"><a class="header-anchor" href="#defined-in-6" aria-hidden="true">#</a> Defined in</h4><p>src/renderer/default/renderer.interface.ts:53</p><hr><h3 id="suffixskips" tabindex="-1"><a class="header-anchor" href="#suffixskips" aria-hidden="true">#</a> suffixSkips</h3><p>• <code>Optional</code> <strong>suffixSkips</strong>: <code>boolean</code></p><p>suffix skip messages with [SKIPPED] when in collapseSkips mode</p><p><strong><code>Default</code></strong></p><p>true</p><h4 id="defined-in-7" tabindex="-1"><a class="header-anchor" href="#defined-in-7" aria-hidden="true">#</a> Defined in</h4><p>src/renderer/default/renderer.interface.ts:59</p><hr><h3 id="showerrormessage" tabindex="-1"><a class="header-anchor" href="#showerrormessage" aria-hidden="true">#</a> showErrorMessage</h3><p>• <code>Optional</code> <strong>showErrorMessage</strong>: <code>boolean</code></p><p>shows the thrown error message or show the original title of the task, this will also disable collapseErrors mode You can disable showing the error messages, even though you passed in a message by settings this option, if you want to keep the original task title intact.</p><p><strong><code>Default</code></strong></p><p>true</p><h4 id="defined-in-8" tabindex="-1"><a class="header-anchor" href="#defined-in-8" aria-hidden="true">#</a> Defined in</h4><p>src/renderer/default/renderer.interface.ts:67</p><hr><h3 id="collapseerrors" tabindex="-1"><a class="header-anchor" href="#collapseerrors" aria-hidden="true">#</a> collapseErrors</h3><p>• <code>Optional</code> <strong>collapseErrors</strong>: <code>boolean</code></p><p>collapse error messages into a single message and overwrite the task title</p><p><strong><code>Default</code></strong></p><p>true</p><h4 id="defined-in-9" tabindex="-1"><a class="header-anchor" href="#defined-in-9" aria-hidden="true">#</a> Defined in</h4><p>src/renderer/default/renderer.interface.ts:73</p><hr><h3 id="suffixretries" tabindex="-1"><a class="header-anchor" href="#suffixretries" aria-hidden="true">#</a> suffixRetries</h3><p>• <code>Optional</code> <strong>suffixRetries</strong>: <code>boolean</code></p><p>suffix retry messages with [RETRY-${COUNT}] when retry is enabled for a task</p><p><strong><code>Default</code></strong></p><p>true</p><h4 id="defined-in-10" tabindex="-1"><a class="header-anchor" href="#defined-in-10" aria-hidden="true">#</a> Defined in</h4><p>src/renderer/default/renderer.interface.ts:79</p><hr><h3 id="lazy" tabindex="-1"><a class="header-anchor" href="#lazy" aria-hidden="true">#</a> lazy</h3><p>• <code>Optional</code> <strong>lazy</strong>: <code>boolean</code></p><p>only update through triggers from renderhook</p><p>useful for tests and stuff. this will disable showing spinner and only update the screen if something else has happened in the task worthy to show</p><p><strong><code>Default</code></strong></p><p>false</p><p><strong><code>Global</code></strong></p><p>global option that can not be temperated with subtasks</p><h4 id="defined-in-11" tabindex="-1"><a class="header-anchor" href="#defined-in-11" aria-hidden="true">#</a> Defined in</h4><p>src/renderer/default/renderer.interface.ts:89</p><hr><h3 id="removeemptylines" tabindex="-1"><a class="header-anchor" href="#removeemptylines" aria-hidden="true">#</a> removeEmptyLines</h3><p>• <code>Optional</code> <strong>removeEmptyLines</strong>: <code>boolean</code></p><p>removes empty lines from the data output</p><p><strong><code>Default</code></strong></p><p>true</p><h4 id="defined-in-12" tabindex="-1"><a class="header-anchor" href="#defined-in-12" aria-hidden="true">#</a> Defined in</h4><p>src/renderer/default/renderer.interface.ts:95</p><hr><h3 id="formatoutput" tabindex="-1"><a class="header-anchor" href="#formatoutput" aria-hidden="true">#</a> formatOutput</h3><p>• <code>Optional</code> <strong>formatOutput</strong>: <code>&quot;wrap&quot;</code> | <code>&quot;truncate&quot;</code></p><p>formats data output depending on your requirements.</p><p><strong><code>Default</code></strong></p><p>&#39;wrap&#39;</p><p><strong><code>Global</code></strong></p><p>global option that can not be temperated with subtasks</p><h4 id="defined-in-13" tabindex="-1"><a class="header-anchor" href="#defined-in-13" aria-hidden="true">#</a> Defined in</h4><p>src/renderer/default/renderer.interface.ts:102</p><hr><h3 id="style" tabindex="-1"><a class="header-anchor" href="#style" aria-hidden="true">#</a> style</h3>',116),G=e("code",null,"Optional",-1),N=e("strong",null,"style",-1),q=e("code",null,"ListrDefaultRendererOptionsStyle",-1),z=e("p",null,"Options for styling with icon and color.",-1),B=e("p",null,[e("strong",null,[e("code",null,"Global")])],-1),V=e("p",null,"global option that can not be temperated with subtasks",-1),Y=e("h4",{id:"defined-in-14",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-14","aria-hidden":"true"},"#"),t(" Defined in")],-1),C=e("p",null,"src/renderer/default/renderer.interface.ts:108",-1),M=e("hr",null,null,-1),H=e("h3",{id:"spinner",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#spinner","aria-hidden":"true"},"#"),t(" spinner")],-1),$=e("code",null,"Optional",-1),K=e("strong",null,"spinner",-1),U=e("code",null,"Spinner",-1),W=e("h4",{id:"defined-in-15",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-15","aria-hidden":"true"},"#"),t(" Defined in")],-1),X=e("p",null,"src/renderer/default/renderer.interface.ts:110",-1),Z=e("hr",null,null,-1),j=e("h3",{id:"logger",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#logger","aria-hidden":"true"},"#"),t(" logger")],-1),A=e("code",null,"Optional",-1),F=e("strong",null,"logger",-1),J=e("code",null,"ListrLogger",-1),Q=e("h4",{id:"inherited-from-1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#inherited-from-1","aria-hidden":"true"},"#"),t(" Inherited from")],-1),ee=e("h4",{id:"defined-in-16",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-16","aria-hidden":"true"},"#"),t(" Defined in")],-1),te=e("p",null,"src/utils/logger/logger.interface.ts:49",-1),re=e("hr",null,null,-1),ne=e("h3",{id:"loggeroptions",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#loggeroptions","aria-hidden":"true"},"#"),t(" loggerOptions")],-1),ae=e("code",null,"Optional",-1),oe=e("strong",null,"loggerOptions",-1),de=e("code",null,"ListrLoggerOptions",-1),se=e("h4",{id:"inherited-from-2",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#inherited-from-2","aria-hidden":"true"},"#"),t(" Inherited from")],-1),ie=e("h4",{id:"defined-in-17",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-17","aria-hidden":"true"},"#"),t(" Defined in")],-1),he=e("p",null,"src/utils/logger/logger.interface.ts:50",-1),le=e("h2",{id:"renderer-task-options",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#renderer-task-options","aria-hidden":"true"},"#"),t(" Renderer Task Options")],-1),ce={class:"hint-container details"},pe=e("summary",null,"Details",-1),ue=e("h1",{id:"interface-defaultrenderertaskoptions",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#interface-defaultrenderertaskoptions","aria-hidden":"true"},"#"),t(" Interface: DefaultRendererTaskOptions")],-1),fe=e("h2",{id:"hierarchy-1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#hierarchy-1","aria-hidden":"true"},"#"),t(" Hierarchy")],-1),ge=e("code",null,"RendererPresetTimer",-1),_e=e("p",null,[t("↳ "),e("strong",null,[e("code",null,"DefaultRendererTaskOptions")])],-1),me=e("h2",{id:"properties-1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#properties-1","aria-hidden":"true"},"#"),t(" Properties")],-1),be=e("h3",{id:"timer-1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#timer-1","aria-hidden":"true"},"#"),t(" timer")],-1),ke=e("code",null,"Optional",-1),xe=e("strong",null,"timer",-1),we=e("code",null,"PresetTimer",-1),Oe=e("p",null,"show duration for all tasks",-1),ye=e("p",null,[e("strong",null,[e("code",null,"Default")])],-1),De=e("p",null,"false",-1),Re=e("p",null,[e("strong",null,[e("code",null,"Global")])],-1),Te=e("p",null,"global option that can not be temperated with subtasks",-1),Le=e("h4",{id:"inherited-from-3",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#inherited-from-3","aria-hidden":"true"},"#"),t(" Inherited from")],-1),Pe=o('<h4 id="defined-in-18" tabindex="-1"><a class="header-anchor" href="#defined-in-18" aria-hidden="true">#</a> Defined in</h4><p>src/presets/timer/preset.interface.ts:12</p><hr><h3 id="bottombar" tabindex="-1"><a class="header-anchor" href="#bottombar" aria-hidden="true">#</a> bottomBar</h3><p>• <code>Optional</code> <strong>bottomBar</strong>: <code>number</code> | <code>boolean</code></p><p>write task output to the bottom bar instead of the gap under the task title itself. useful for a stream of data.</p><p><strong><code>Default</code></strong></p><p>false</p><p><code>true</code> only keep 1 line of the latest data outputted by the task. <code>false</code> only keep 1 line of the latest data outputted by the task. <code>number</code> will keep designated data of the latest data outputted by the task.</p><h4 id="defined-in-19" tabindex="-1"><a class="header-anchor" href="#defined-in-19" aria-hidden="true">#</a> Defined in</h4><p>src/renderer/default/renderer.interface.ts:123</p><hr><h3 id="persistentoutput" tabindex="-1"><a class="header-anchor" href="#persistentoutput" aria-hidden="true">#</a> persistentOutput</h3><p>• <code>Optional</code> <strong>persistentOutput</strong>: <code>boolean</code></p><p>keep output after task finishes</p><p><strong><code>Default</code></strong></p><p>false</p><p>works both for the bottom bar and the default behavior</p><h4 id="defined-in-20" tabindex="-1"><a class="header-anchor" href="#defined-in-20" aria-hidden="true">#</a> Defined in</h4><p>src/renderer/default/renderer.interface.ts:130</p>',20);function ve(Se,Ee){const r=l("RouterLink");return s(),i("div",null,[p,h(" more "),u,e("details",f,[g,_,m,e("ul",null,[e("li",null,[e("p",null,[n(r,{to:"/renderer/RendererPresetTimer.html"},{default:a(()=>[b]),_:1})])]),e("li",null,[e("p",null,[n(r,{to:"/renderer/LoggerRendererOptions.html"},{default:a(()=>[k]),_:1})]),x])]),w,O,e("p",null,[t("• "),y,t(),D,t(": "),n(r,{to:"/api/types/PresetTimer.html"},{default:a(()=>[R]),_:1})]),T,L,P,v,S,E,e("p",null,[n(r,{to:"/renderer/RendererPresetTimer.html"},{default:a(()=>[t("RendererPresetTimer")]),_:1}),t("."),n(r,{to:"/renderer/RendererPresetTimer.html#timer"},{default:a(()=>[t("timer")]),_:1})]),I,e("p",null,[t("• "),G,t(),N,t(": "),n(r,{to:"/api/types/ListrDefaultRendererOptionsStyle.html"},{default:a(()=>[q]),_:1})]),z,B,V,Y,C,M,H,e("p",null,[t("• "),$,t(),K,t(": "),n(r,{to:"/api/classes/Spinner.html"},{default:a(()=>[U]),_:1})]),W,X,Z,j,e("p",null,[t("• "),A,t(),F,t(": typeof "),n(r,{to:"/api/classes/ListrLogger.html"},{default:a(()=>[J]),_:1})]),Q,e("p",null,[n(r,{to:"/renderer/LoggerRendererOptions.html"},{default:a(()=>[t("LoggerRendererOptions")]),_:1}),t("."),n(r,{to:"/renderer/LoggerRendererOptions.html#logger"},{default:a(()=>[t("logger")]),_:1})]),ee,te,re,ne,e("p",null,[t("• "),ae,t(),oe,t(": "),n(r,{to:"/renderer/ListrLoggerOptions.html"},{default:a(()=>[de]),_:1})]),se,e("p",null,[n(r,{to:"/renderer/LoggerRendererOptions.html"},{default:a(()=>[t("LoggerRendererOptions")]),_:1}),t("."),n(r,{to:"/renderer/LoggerRendererOptions.html#loggeroptions"},{default:a(()=>[t("loggerOptions")]),_:1})]),ie,he]),le,e("details",ce,[pe,ue,fe,e("ul",null,[e("li",null,[e("p",null,[n(r,{to:"/renderer/RendererPresetTimer.html"},{default:a(()=>[ge]),_:1})]),_e])]),me,be,e("p",null,[t("• "),ke,t(),xe,t(": "),n(r,{to:"/api/types/PresetTimer.html"},{default:a(()=>[we]),_:1})]),Oe,ye,De,Re,Te,Le,e("p",null,[n(r,{to:"/renderer/RendererPresetTimer.html"},{default:a(()=>[t("RendererPresetTimer")]),_:1}),t("."),n(r,{to:"/renderer/RendererPresetTimer.html#timer"},{default:a(()=>[t("timer")]),_:1})]),Pe])])}const Ge=d(c,[["render",ve],["__file","default.html.vue"]]);export{Ge as default};
