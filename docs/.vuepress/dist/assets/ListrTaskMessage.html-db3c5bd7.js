import{_ as i,W as t,X as s,Y as e,$ as a,Z as n,a2 as d,a5 as o,D as h}from"./framework-4c9bc095.js";const c={},f=o('<h1 id="interface-listrtaskmessage" tabindex="-1"><a class="header-anchor" href="#interface-listrtaskmessage" aria-hidden="true">#</a> Interface: ListrTaskMessage</h1><h2 id="properties" tabindex="-1"><a class="header-anchor" href="#properties" aria-hidden="true">#</a> Properties</h2><h3 id="duration" tabindex="-1"><a class="header-anchor" href="#duration" aria-hidden="true">#</a> duration</h3><p>• <code>Optional</code> <strong>duration</strong>: <code>number</code></p><p>Run time of the task, if it has been successfully resolved.</p><h4 id="defined-in" tabindex="-1"><a class="header-anchor" href="#defined-in" aria-hidden="true">#</a> Defined in</h4><p>src/interfaces/task.interface.ts:86</p><hr><h3 id="error" tabindex="-1"><a class="header-anchor" href="#error" aria-hidden="true">#</a> error</h3><p>• <code>Optional</code> <strong>error</strong>: <code>string</code></p><p>Error message of the task, if it has been failed.</p><h4 id="defined-in-1" tabindex="-1"><a class="header-anchor" href="#defined-in-1" aria-hidden="true">#</a> Defined in</h4><p>src/interfaces/task.interface.ts:88</p><hr><h3 id="skip" tabindex="-1"><a class="header-anchor" href="#skip" aria-hidden="true">#</a> skip</h3><p>• <code>Optional</code> <strong>skip</strong>: <code>string</code></p><p>Skip message of the task, if it has been skipped.</p><h4 id="defined-in-2" tabindex="-1"><a class="header-anchor" href="#defined-in-2" aria-hidden="true">#</a> Defined in</h4><p>src/interfaces/task.interface.ts:90</p><hr><h3 id="rollback" tabindex="-1"><a class="header-anchor" href="#rollback" aria-hidden="true">#</a> rollback</h3><p>• <code>Optional</code> <strong>rollback</strong>: <code>string</code></p><p>Rollback message of the task, if the rollback finishes</p><h4 id="defined-in-3" tabindex="-1"><a class="header-anchor" href="#defined-in-3" aria-hidden="true">#</a> Defined in</h4><p>src/interfaces/task.interface.ts:92</p><hr><h3 id="retry" tabindex="-1"><a class="header-anchor" href="#retry" aria-hidden="true">#</a> retry</h3>',27),l=e("code",null,"Optional",-1),p=e("strong",null,"retry",-1),u=e("code",null,"ListrTaskRetry",-1),k=e("p",null,"Retry messages",-1),_=e("h4",{id:"defined-in-4",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-4","aria-hidden":"true"},"#"),a(" Defined in")],-1),b=e("p",null,"src/interfaces/task.interface.ts:94",-1);function g(m,x){const r=h("RouterLink");return t(),s("div",null,[f,e("p",null,[a("• "),l,a(),p,a(": "),n(r,{to:"/api/interfaces/ListrTaskRetry.html"},{default:d(()=>[u]),_:1})]),k,_,b])}const L=i(c,[["render",g],["__file","ListrTaskMessage.html.vue"]]);export{L as default};
