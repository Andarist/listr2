import{_ as t,W as o,X as p,a4 as l,Y as n,$ as s,Z as c,a5 as a,D as i}from"./framework-4c9bc095.js";const r={},u=n("p",null,[s("There are times other than "),n("code",null,"non-TTY"),s(" environments when you want to fallback to a fallback/silent renderer than the selected renderer.")],-1),d=n("p",null,[s("A function that returns a boolean , or directly a boolean can be passed to "),n("a",{href:"/api/classes/Listr.html",target:"_blank"},"Listr"),s(" for automatically stepping down to the "),n("code",null,"fallbackRenderer"),s(" or directly to "),n("em",null,"SilentRenderer"),s(" when the condition is met.")],-1),k=a('<h2 id="default-behavior" tabindex="-1"><a class="header-anchor" href="#default-behavior" aria-hidden="true">#</a> Default Behavior</h2><ul><li><code>fallbackRenderer</code> will be automatically used whenever you are in a <code>non-TTY</code> environment.</li><li>Colors are disabled automatically by underlying the library whenever it is detected as not supported. <ul><li>You can use the <code>forceColor</code> option on <a href="/api/classes/Listr.html" target="_blank">Listr</a> or set the environment variable <code>FORCE_COLOR=1</code> to force colors.</li><li>You can use the <code>disableColor</code> option on <a href="/api/classes/Listr.html" target="_blank">Listr</a> or set the environment variable <code>LISTR_DISABLE_COLOR=1</code> to disable colors completely even though your environment supports it. This is very useful for tests.</li></ul></li><li>Unicode characters like icons are not used whenever it is detected that your output does not support them. <ul><li>You can use the <code>forceUnicode</code> option on <a href="/api/classes/Listr.html" target="_blank">Listr</a> or set the environment variable <code>LISTR_FORCE_UNICODE=1</code> to force the usage of the Unicode characters.</li></ul></li></ul><div class="hint-container warning"><p class="hint-container-title">Note</p><p>These checks are primal at best but do not forget that in many cases, your terminal might support any of these UI properties, but the application in between might abstract access to them therefore it can be detected otherwise.</p></div><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2>',4),b={class:"hint-container info"},h=n("p",{class:"hint-container-title"},"Example",-1),v={href:"https://github.com/cenk1cenk2/listr2/tree/master/examples/renderer-fallback-condition.example.ts",target:"_blank",rel:"noopener noreferrer"},m=a(`<h3 id="renderer-fallback" tabindex="-1"><a class="header-anchor" href="#renderer-fallback" aria-hidden="true">#</a> Renderer Fallback</h3><p>You can use the <code>rendererFallback</code> condition on <a href="/api/classes/Listr.html" target="_blank">Listr</a> to determine changing your renderer to the fallback renderer.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> tasks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Listr</span><span class="token punctuation">(</span>
  <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      title<span class="token operator">:</span> <span class="token string">&#39;This task will execute.&#39;</span><span class="token punctuation">,</span>
      task<span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        task<span class="token punctuation">.</span>output <span class="token operator">=</span> <span class="token string">&#39;test&#39;</span>

        <span class="token keyword">await</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      options<span class="token operator">:</span> <span class="token punctuation">{</span> persistentOutput<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> concurrent<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> rendererFallback<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=&gt;</span> <span class="token number">3</span> <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token punctuation">}</span>
<span class="token punctuation">)</span>

<span class="token keyword">await</span> tasks<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="silent-renderer-fallback" tabindex="-1"><a class="header-anchor" href="#silent-renderer-fallback" aria-hidden="true">#</a> Silent Renderer Fallback</h3><p>You can use the <code>rendererSilent</code> condition on <a href="/api/classes/Listr.html" target="_blank">Listr</a> to determine changing your renderer to the fallback renderer.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> tasks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Listr</span><span class="token punctuation">(</span>
  <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      title<span class="token operator">:</span> <span class="token string">&#39;This task will execute.&#39;</span><span class="token punctuation">,</span>
      task<span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        task<span class="token punctuation">.</span>output <span class="token operator">=</span> <span class="token string">&#39;test&#39;</span>

        <span class="token keyword">await</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      options<span class="token operator">:</span> <span class="token punctuation">{</span> persistentOutput<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> concurrent<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> rendererSilent<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=&gt;</span> <span class="token number">3</span> <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token punctuation">}</span>
<span class="token punctuation">)</span>

<span class="token keyword">await</span> tasks<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6);function f(g,_){const e=i("ExternalLinkIcon");return o(),p("div",null,[u,d,l(" more "),k,n("div",b,[h,n("p",null,[s("You can find the related examples "),n("a",v,[s("here"),c(e)]),s(".")])]),m])}const w=t(r,[["render",f],["__file","fallback-condition.html.vue"]]);export{w as default};
