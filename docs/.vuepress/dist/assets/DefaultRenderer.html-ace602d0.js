import{_ as o,W as l,X as c,Y as e,Z as d,a2 as r,$ as t,a5 as a,D as s}from"./framework-4c9bc095.js";const h={},u=e("h1",{id:"class-defaultrenderer",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#class-defaultrenderer","aria-hidden":"true"},"#"),t(" Class: DefaultRenderer")],-1),f=e("p",null,"Default updating renderer for Listr2",-1),p=e("h2",{id:"implements",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#implements","aria-hidden":"true"},"#"),t(" Implements")],-1),_=e("code",null,"ListrRenderer",-1),m=a('<h2 id="properties" tabindex="-1"><a class="header-anchor" href="#properties" aria-hidden="true">#</a> Properties</h2><h3 id="nontty" tabindex="-1"><a class="header-anchor" href="#nontty" aria-hidden="true">#</a> nonTTY</h3><p>▪ <code>Static</code> <strong>nonTTY</strong>: <code>boolean</code> = <code>false</code></p><p>designates whether this renderer can output to a non-tty console</p><h4 id="implementation-of" tabindex="-1"><a class="header-anchor" href="#implementation-of" aria-hidden="true">#</a> Implementation of</h4>',5),g=e("h4",{id:"defined-in",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in","aria-hidden":"true"},"#"),t(" Defined in")],-1),x=e("p",null,"src/renderer/default/renderer.ts:17",-1),b=e("hr",null,null,-1),y=e("h3",{id:"rendereroptions",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#rendereroptions","aria-hidden":"true"},"#"),t(" rendererOptions")],-1),v=e("code",null,"Static",-1),D=e("strong",null,"rendererOptions",-1),R=e("code",null,"DefaultRendererOptions",-1),k=e("p",null,"renderer options for the defauult renderer",-1),T=e("h4",{id:"implementation-of-1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#implementation-of-1","aria-hidden":"true"},"#"),t(" Implementation of")],-1),L=e("h4",{id:"defined-in-1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-1","aria-hidden":"true"},"#"),t(" Defined in")],-1),O=e("p",null,"src/renderer/default/renderer.ts:19",-1),P=e("hr",null,null,-1),w=e("h3",{id:"renderertaskoptions",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#renderertaskoptions","aria-hidden":"true"},"#"),t(" rendererTaskOptions")],-1),N=e("code",null,"Static",-1),B=e("strong",null,"rendererTaskOptions",-1),j=e("code",null,"DefaultRendererTaskOptions",-1),E=e("p",null,"per task options for the default renderer",-1),I=e("h4",{id:"implementation-of-2",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#implementation-of-2","aria-hidden":"true"},"#"),t(" Implementation of")],-1),S=a('<h4 id="defined-in-2" tabindex="-1"><a class="header-anchor" href="#defined-in-2" aria-hidden="true">#</a> Defined in</h4><p>src/renderer/default/renderer.ts:37</p><hr><h3 id="bottom" tabindex="-1"><a class="header-anchor" href="#bottom" aria-hidden="true">#</a> bottom</h3><p>• <code>Private</code> <strong>bottom</strong>: <code>Record</code>&lt;<code>string</code>, { <code>data?</code>: <code>string</code>[] ; <code>items?</code>: <code>number</code> }&gt; = <code>{}</code></p><h4 id="defined-in-3" tabindex="-1"><a class="header-anchor" href="#defined-in-3" aria-hidden="true">#</a> Defined in</h4><p>src/renderer/default/renderer.ts:39</p><hr><h3 id="prompt" tabindex="-1"><a class="header-anchor" href="#prompt" aria-hidden="true">#</a> prompt</h3><p>• <code>Private</code> <strong>prompt</strong>: <code>string</code></p><h4 id="defined-in-4" tabindex="-1"><a class="header-anchor" href="#defined-in-4" aria-hidden="true">#</a> Defined in</h4><p>src/renderer/default/renderer.ts:40</p><hr><h3 id="activeprompt" tabindex="-1"><a class="header-anchor" href="#activeprompt" aria-hidden="true">#</a> activePrompt</h3><p>• <code>Private</code> <strong>activePrompt</strong>: <code>string</code></p><h4 id="defined-in-5" tabindex="-1"><a class="header-anchor" href="#defined-in-5" aria-hidden="true">#</a> Defined in</h4><p>src/renderer/default/renderer.ts:41</p><hr><h3 id="spinner" tabindex="-1"><a class="header-anchor" href="#spinner" aria-hidden="true">#</a> spinner</h3>',19),A=e("code",null,"Private",-1),C=e("code",null,"Readonly",-1),K=e("strong",null,"spinner",-1),M=e("code",null,"Spinner",-1),U=e("h4",{id:"defined-in-6",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-6","aria-hidden":"true"},"#"),t(" Defined in")],-1),V=e("p",null,"src/renderer/default/renderer.ts:42",-1),Y=e("hr",null,null,-1),z=e("h3",{id:"logger",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#logger","aria-hidden":"true"},"#"),t(" logger")],-1),W=e("code",null,"Private",-1),q=e("code",null,"Readonly",-1),F=e("strong",null,"logger",-1),X=e("code",null,"ListrLogger",-1),Z=a(`<h4 id="defined-in-7" tabindex="-1"><a class="header-anchor" href="#defined-in-7" aria-hidden="true">#</a> Defined in</h4><p>src/renderer/default/renderer.ts:43</p><hr><h3 id="updater" tabindex="-1"><a class="header-anchor" href="#updater" aria-hidden="true">#</a> updater</h3><p>• <code>Private</code> <strong>updater</strong>: (...<code>text</code>: <code>string</code>[]) =&gt; <code>void</code> &amp; <code>LogUpdateMethods</code></p><h4 id="defined-in-8" tabindex="-1"><a class="header-anchor" href="#defined-in-8" aria-hidden="true">#</a> Defined in</h4><p>src/renderer/default/renderer.ts:44</p><hr><h3 id="truncate" tabindex="-1"><a class="header-anchor" href="#truncate" aria-hidden="true">#</a> truncate</h3><p>• <code>Private</code> <strong>truncate</strong>: (<code>text</code>: <code>string</code>, <code>columns</code>: <code>number</code>, <code>options?</code>: <code>Options</code>) =&gt; <code>string</code></p><h4 id="type-declaration" tabindex="-1"><a class="header-anchor" href="#type-declaration" aria-hidden="true">#</a> Type declaration</h4><p>▸ (<code>text</code>, <code>columns</code>, <code>options?</code>): <code>string</code></p><p>Truncate a string to a specific width in the terminal.</p><p><strong><code>Example</code></strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>import cliTruncate from &#39;cli-truncate&#39;;

cliTruncate(&#39;unicorn&#39;, 4);
//=&gt; &#39;uni…&#39;

// Truncate at different positions
cliTruncate(&#39;unicorn&#39;, 4, {position: &#39;start&#39;});
//=&gt; &#39;…orn&#39;

cliTruncate(&#39;unicorn&#39;, 4, {position: &#39;middle&#39;});
//=&gt; &#39;un…n&#39;

cliTruncate(&#39;\\u001B[31municorn\\u001B[39m&#39;, 4);
//=&gt; &#39;\\u001B[31muni\\u001B[39m…&#39;

// Truncate Unicode surrogate pairs
cliTruncate(&#39;uni\\uD83C\\uDE00corn&#39;, 5);
//=&gt; &#39;uni\\uD83C\\uDE00…&#39;

// Truncate fullwidth characters
cliTruncate(&#39;안녕하세요&#39;, 3);
//=&gt; &#39;안…&#39;

// Truncate the paragraph to the terminal width
const paragraph = &#39;Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa.&#39;;
cliTruncate(paragraph, process.stdout.columns));
//=&gt; &#39;Lorem ipsum dolor sit amet, consectetuer adipiscing…&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters" aria-hidden="true">#</a> Parameters</h5><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>text</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">Text to truncate.</td></tr><tr><td style="text-align:left;"><code>columns</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">The number of columns to occupy in the terminal.</td></tr><tr><td style="text-align:left;"><code>options?</code></td><td style="text-align:left;"><code>Options</code></td><td style="text-align:left;">-</td></tr></tbody></table><h5 id="returns" tabindex="-1"><a class="header-anchor" href="#returns" aria-hidden="true">#</a> Returns</h5><p><code>string</code></p><h4 id="defined-in-9" tabindex="-1"><a class="header-anchor" href="#defined-in-9" aria-hidden="true">#</a> Defined in</h4><p>src/renderer/default/renderer.ts:45</p><hr><h3 id="wrap" tabindex="-1"><a class="header-anchor" href="#wrap" aria-hidden="true">#</a> wrap</h3><p>• <code>Private</code> <strong>wrap</strong>: (<code>string</code>: <code>string</code>, <code>columns</code>: <code>number</code>, <code>options?</code>: <code>Options</code>) =&gt; <code>string</code></p><h4 id="type-declaration-1" tabindex="-1"><a class="header-anchor" href="#type-declaration-1" aria-hidden="true">#</a> Type declaration</h4><p>▸ (<code>string</code>, <code>columns</code>, <code>options?</code>): <code>string</code></p><p>Wrap words to the specified column width.</p><p><strong><code>Example</code></strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>import chalk from &#39;chalk&#39;;
import wrapAnsi from &#39;wrap-ansi&#39;;

const input = &#39;The quick brown &#39; + chalk.red(&#39;fox jumped over &#39;) +
	&#39;the lazy &#39; + chalk.green(&#39;dog and then ran away with the unicorn.&#39;);

console.log(wrapAnsi(input, 20));
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="parameters-1" tabindex="-1"><a class="header-anchor" href="#parameters-1" aria-hidden="true">#</a> Parameters</h5>`,30),$=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type"),e("th",{style:{"text-align":"left"}},"Description")])],-1),G=e("td",{style:{"text-align":"left"}},[e("code",null,"string")],-1),H=e("td",{style:{"text-align":"left"}},[e("code",null,"string")],-1),J={style:{"text-align":"left"}},Q={href:"https://github.com/chalk/chalk",target:"_blank",rel:"noopener noreferrer"},ee=e("code",null,"chalk",-1),te=e("code",null,"\\n",-1),de=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"columns")]),e("td",{style:{"text-align":"left"}},[e("code",null,"number")]),e("td",{style:{"text-align":"left"}},"Number of columns to wrap the text to.")],-1),ne=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"options?")]),e("td",{style:{"text-align":"left"}},[e("code",null,"Options")]),e("td",{style:{"text-align":"left"}},"-")],-1),re=a('<h5 id="returns-1" tabindex="-1"><a class="header-anchor" href="#returns-1" aria-hidden="true">#</a> Returns</h5><p><code>string</code></p><h4 id="defined-in-10" tabindex="-1"><a class="header-anchor" href="#defined-in-10" aria-hidden="true">#</a> Defined in</h4><p>src/renderer/default/renderer.ts:46</p><hr><h3 id="tasks" tabindex="-1"><a class="header-anchor" href="#tasks" aria-hidden="true">#</a> tasks</h3>',6),ae=e("code",null,"Private",-1),se=e("code",null,"Readonly",-1),ie=e("strong",null,"tasks",-1),oe=e("code",null,"ListrDefaultRendererTasks",-1),le=e("h4",{id:"defined-in-11",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-11","aria-hidden":"true"},"#"),t(" Defined in")],-1),ce=e("p",null,"src/renderer/default/renderer.ts:48",-1),he=e("hr",null,null,-1),ue=e("h3",{id:"options",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#options","aria-hidden":"true"},"#"),t(" options")],-1),fe=e("code",null,"Private",-1),pe=e("code",null,"Readonly",-1),_e=e("strong",null,"options",-1),me=e("code",null,"DefaultRendererOptions",-1),ge=e("h4",{id:"defined-in-12",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-12","aria-hidden":"true"},"#"),t(" Defined in")],-1),xe=e("p",null,"src/renderer/default/renderer.ts:48",-1),be=e("hr",null,null,-1),ye=e("h3",{id:"events",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#events","aria-hidden":"true"},"#"),t(" events")],-1),ve=e("code",null,"Private",-1),De=e("code",null,"Readonly",-1),Re=e("strong",null,"events",-1),ke=e("code",null,"ListrEventManager",-1),Te=a('<h4 id="defined-in-13" tabindex="-1"><a class="header-anchor" href="#defined-in-13" aria-hidden="true">#</a> Defined in</h4><p>src/renderer/default/renderer.ts:48</p><h2 id="constructors" tabindex="-1"><a class="header-anchor" href="#constructors" aria-hidden="true">#</a> Constructors</h2><h3 id="constructor" tabindex="-1"><a class="header-anchor" href="#constructor" aria-hidden="true">#</a> constructor</h3><p>• <strong>new DefaultRenderer</strong>(<code>tasks</code>, <code>options</code>, <code>events</code>)</p><h4 id="parameters-2" tabindex="-1"><a class="header-anchor" href="#parameters-2" aria-hidden="true">#</a> Parameters</h4>',6),Le=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type")])],-1),Oe=e("td",{style:{"text-align":"left"}},[e("code",null,"tasks")],-1),Pe={style:{"text-align":"left"}},we=e("code",null,"ListrDefaultRendererTasks",-1),Ne=e("td",{style:{"text-align":"left"}},[e("code",null,"options")],-1),Be={style:{"text-align":"left"}},je=e("code",null,"DefaultRendererOptions",-1),Ee=e("td",{style:{"text-align":"left"}},[e("code",null,"events")],-1),Ie={style:{"text-align":"left"}},Se=e("code",null,"ListrEventManager",-1),Ae=a('<h4 id="defined-in-14" tabindex="-1"><a class="header-anchor" href="#defined-in-14" aria-hidden="true">#</a> Defined in</h4><p>src/renderer/default/renderer.ts:48</p><h2 id="methods" tabindex="-1"><a class="header-anchor" href="#methods" aria-hidden="true">#</a> Methods</h2><h3 id="gettaskoptions" tabindex="-1"><a class="header-anchor" href="#gettaskoptions" aria-hidden="true">#</a> getTaskOptions</h3>',4),Ce=e("strong",null,"getTaskOptions",-1),Ke=e("code",null,"task",-1),Me=e("code",null,"DefaultRendererTaskOptions",-1),Ue=e("h4",{id:"parameters-3",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#parameters-3","aria-hidden":"true"},"#"),t(" Parameters")],-1),Ve=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type")])],-1),Ye=e("td",{style:{"text-align":"left"}},[e("code",null,"task")],-1),ze={style:{"text-align":"left"}},We=e("code",null,"ListrTaskObject",-1),qe=e("code",null,"any",-1),Fe=e("code",null,"DefaultRenderer",-1),Xe=e("h4",{id:"returns-2",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#returns-2","aria-hidden":"true"},"#"),t(" Returns")],-1),Ze=e("code",null,"DefaultRendererTaskOptions",-1),$e=a('<h4 id="defined-in-15" tabindex="-1"><a class="header-anchor" href="#defined-in-15" aria-hidden="true">#</a> Defined in</h4><p>src/renderer/default/renderer.ts:68</p><hr><h3 id="isbottombar" tabindex="-1"><a class="header-anchor" href="#isbottombar" aria-hidden="true">#</a> isBottomBar</h3><p>▸ <strong>isBottomBar</strong>(<code>task</code>): <code>boolean</code></p><h4 id="parameters-4" tabindex="-1"><a class="header-anchor" href="#parameters-4" aria-hidden="true">#</a> Parameters</h4>',6),Ge=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type")])],-1),He=e("td",{style:{"text-align":"left"}},[e("code",null,"task")],-1),Je={style:{"text-align":"left"}},Qe=e("code",null,"ListrTaskObject",-1),et=e("code",null,"any",-1),tt=e("code",null,"DefaultRenderer",-1),dt=a('<h4 id="returns-3" tabindex="-1"><a class="header-anchor" href="#returns-3" aria-hidden="true">#</a> Returns</h4><p><code>boolean</code></p><h4 id="defined-in-16" tabindex="-1"><a class="header-anchor" href="#defined-in-16" aria-hidden="true">#</a> Defined in</h4><p>src/renderer/default/renderer.ts:72</p><hr><h3 id="haspersistentoutput" tabindex="-1"><a class="header-anchor" href="#haspersistentoutput" aria-hidden="true">#</a> hasPersistentOutput</h3><p>▸ <strong>hasPersistentOutput</strong>(<code>task</code>): <code>boolean</code></p><h4 id="parameters-5" tabindex="-1"><a class="header-anchor" href="#parameters-5" aria-hidden="true">#</a> Parameters</h4>',8),nt=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type")])],-1),rt=e("td",{style:{"text-align":"left"}},[e("code",null,"task")],-1),at={style:{"text-align":"left"}},st=e("code",null,"ListrTaskObject",-1),it=e("code",null,"any",-1),ot=e("code",null,"DefaultRenderer",-1),lt=a('<h4 id="returns-4" tabindex="-1"><a class="header-anchor" href="#returns-4" aria-hidden="true">#</a> Returns</h4><p><code>boolean</code></p><h4 id="defined-in-17" tabindex="-1"><a class="header-anchor" href="#defined-in-17" aria-hidden="true">#</a> Defined in</h4><p>src/renderer/default/renderer.ts:78</p><hr><h3 id="getselforparentoption" tabindex="-1"><a class="header-anchor" href="#getselforparentoption" aria-hidden="true">#</a> getSelfOrParentOption</h3>',6),ct=e("strong",null,"getSelfOrParentOption",-1),ht=e("code",null,"K",-1),ut=e("code",null,"task",-1),ft=e("code",null,"key",-1),pt=e("code",null,"DefaultRendererOptions",-1),_t=e("code",null,"K",-1),mt=e("h4",{id:"type-parameters",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#type-parameters","aria-hidden":"true"},"#"),t(" Type parameters")],-1),gt=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type")])],-1),xt=e("td",{style:{"text-align":"left"}},[e("code",null,"K")],-1),bt={style:{"text-align":"left"}},yt=e("code",null,"DefaultRendererOptions",-1),vt=e("h4",{id:"parameters-6",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#parameters-6","aria-hidden":"true"},"#"),t(" Parameters")],-1),Dt=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type")])],-1),Rt=e("td",{style:{"text-align":"left"}},[e("code",null,"task")],-1),kt={style:{"text-align":"left"}},Tt=e("code",null,"ListrTaskObject",-1),Lt=e("code",null,"any",-1),Ot=e("code",null,"DefaultRenderer",-1),Pt=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"key")]),e("td",{style:{"text-align":"left"}},[e("code",null,"K")])],-1),wt=e("h4",{id:"returns-5",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#returns-5","aria-hidden":"true"},"#"),t(" Returns")],-1),Nt=e("code",null,"DefaultRendererOptions",-1),Bt=e("code",null,"K",-1),jt=a('<h4 id="defined-in-18" tabindex="-1"><a class="header-anchor" href="#defined-in-18" aria-hidden="true">#</a> Defined in</h4><p>src/renderer/default/renderer.ts:82</p><hr><h3 id="render" tabindex="-1"><a class="header-anchor" href="#render" aria-hidden="true">#</a> render</h3><p>▸ <strong>render</strong>(): <code>Promise</code>&lt;<code>void</code>&gt;</p><p>A function to what to do on render</p><h4 id="returns-6" tabindex="-1"><a class="header-anchor" href="#returns-6" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>void</code>&gt;</p><h4 id="implementation-of-3" tabindex="-1"><a class="header-anchor" href="#implementation-of-3" aria-hidden="true">#</a> Implementation of</h4><p>ListrRenderer.render</p><h4 id="defined-in-19" tabindex="-1"><a class="header-anchor" href="#defined-in-19" aria-hidden="true">#</a> Defined in</h4><p>src/renderer/default/renderer.ts:86</p><hr><h3 id="update" tabindex="-1"><a class="header-anchor" href="#update" aria-hidden="true">#</a> update</h3><p>▸ <strong>update</strong>(): <code>void</code></p><h4 id="returns-7" tabindex="-1"><a class="header-anchor" href="#returns-7" aria-hidden="true">#</a> Returns</h4><p><code>void</code></p><h4 id="defined-in-20" tabindex="-1"><a class="header-anchor" href="#defined-in-20" aria-hidden="true">#</a> Defined in</h4><p>src/renderer/default/renderer.ts:109</p><hr><h3 id="end" tabindex="-1"><a class="header-anchor" href="#end" aria-hidden="true">#</a> end</h3><p>▸ <strong>end</strong>(): <code>void</code></p><p>A function to what to do on end of the render</p><h4 id="returns-8" tabindex="-1"><a class="header-anchor" href="#returns-8" aria-hidden="true">#</a> Returns</h4><p><code>void</code></p><h4 id="implementation-of-4" tabindex="-1"><a class="header-anchor" href="#implementation-of-4" aria-hidden="true">#</a> Implementation of</h4><p>ListrRenderer.end</p><h4 id="defined-in-21" tabindex="-1"><a class="header-anchor" href="#defined-in-21" aria-hidden="true">#</a> Defined in</h4><p>src/renderer/default/renderer.ts:113</p><hr><h3 id="create" tabindex="-1"><a class="header-anchor" href="#create" aria-hidden="true">#</a> create</h3><p>▸ <strong>create</strong>(<code>options?</code>): <code>string</code></p><h4 id="parameters-7" tabindex="-1"><a class="header-anchor" href="#parameters-7" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>options?</code></td><td style="text-align:left;"><code>Object</code></td></tr><tr><td style="text-align:left;"><code>options.tasks?</code></td><td style="text-align:left;"><code>boolean</code></td></tr><tr><td style="text-align:left;"><code>options.bottomBar?</code></td><td style="text-align:left;"><code>boolean</code></td></tr><tr><td style="text-align:left;"><code>options.prompt?</code></td><td style="text-align:left;"><code>boolean</code></td></tr></tbody></table><h4 id="returns-9" tabindex="-1"><a class="header-anchor" href="#returns-9" aria-hidden="true">#</a> Returns</h4><p><code>string</code></p><h4 id="defined-in-22" tabindex="-1"><a class="header-anchor" href="#defined-in-22" aria-hidden="true">#</a> Defined in</h4><p>src/renderer/default/renderer.ts:128</p><hr><h3 id="style" tabindex="-1"><a class="header-anchor" href="#style" aria-hidden="true">#</a> style</h3><p>▸ <code>Protected</code> <strong>style</strong>(<code>task</code>, <code>output?</code>): <code>string</code></p><h4 id="parameters-8" tabindex="-1"><a class="header-anchor" href="#parameters-8" aria-hidden="true">#</a> Parameters</h4>',42),Et=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type"),e("th",{style:{"text-align":"left"}},"Default value")])],-1),It=e("td",{style:{"text-align":"left"}},[e("code",null,"task")],-1),St={style:{"text-align":"left"}},At=e("code",null,"ListrTaskObject",-1),Ct=e("code",null,"any",-1),Kt=e("code",null,"DefaultRenderer",-1),Mt=e("td",{style:{"text-align":"left"}},[e("code",null,"undefined")],-1),Ut=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"output")]),e("td",{style:{"text-align":"left"}},[e("code",null,"boolean")]),e("td",{style:{"text-align":"left"}},[e("code",null,"false")])],-1),Vt=a('<h4 id="returns-10" tabindex="-1"><a class="header-anchor" href="#returns-10" aria-hidden="true">#</a> Returns</h4><p><code>string</code></p><h4 id="defined-in-23" tabindex="-1"><a class="header-anchor" href="#defined-in-23" aria-hidden="true">#</a> Defined in</h4><p>src/renderer/default/renderer.ts:166</p><hr><h3 id="format" tabindex="-1"><a class="header-anchor" href="#format" aria-hidden="true">#</a> format</h3><p>▸ <code>Protected</code> <strong>format</strong>(<code>message</code>, <code>icon</code>, <code>level</code>): <code>string</code>[]</p><h4 id="parameters-9" tabindex="-1"><a class="header-anchor" href="#parameters-9" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>message</code></td><td style="text-align:left;"><code>string</code></td></tr><tr><td style="text-align:left;"><code>icon</code></td><td style="text-align:left;"><code>string</code></td></tr><tr><td style="text-align:left;"><code>level</code></td><td style="text-align:left;"><code>number</code></td></tr></tbody></table><h4 id="returns-11" tabindex="-1"><a class="header-anchor" href="#returns-11" aria-hidden="true">#</a> Returns</h4><p><code>string</code>[]</p><h4 id="defined-in-24" tabindex="-1"><a class="header-anchor" href="#defined-in-24" aria-hidden="true">#</a> Defined in</h4><p>src/renderer/default/renderer.ts:206</p><hr><h3 id="renderer" tabindex="-1"><a class="header-anchor" href="#renderer" aria-hidden="true">#</a> renderer</h3><p>▸ <code>Private</code> <strong>renderer</strong>(<code>tasks</code>, <code>level?</code>): <code>string</code>[]</p><h4 id="parameters-10" tabindex="-1"><a class="header-anchor" href="#parameters-10" aria-hidden="true">#</a> Parameters</h4>',17),Yt=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type"),e("th",{style:{"text-align":"left"}},"Default value")])],-1),zt=e("td",{style:{"text-align":"left"}},[e("code",null,"tasks")],-1),Wt={style:{"text-align":"left"}},qt=e("code",null,"ListrDefaultRendererTasks",-1),Ft=e("td",{style:{"text-align":"left"}},[e("code",null,"undefined")],-1),Xt=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"level")]),e("td",{style:{"text-align":"left"}},[e("code",null,"number")]),e("td",{style:{"text-align":"left"}},[e("code",null,"0")])],-1),Zt=a('<h4 id="returns-12" tabindex="-1"><a class="header-anchor" href="#returns-12" aria-hidden="true">#</a> Returns</h4><p><code>string</code>[]</p><h4 id="defined-in-25" tabindex="-1"><a class="header-anchor" href="#defined-in-25" aria-hidden="true">#</a> Defined in</h4><p>src/renderer/default/renderer.ts:246</p><hr><h3 id="renderbottombar" tabindex="-1"><a class="header-anchor" href="#renderbottombar" aria-hidden="true">#</a> renderBottomBar</h3><p>▸ <code>Private</code> <strong>renderBottomBar</strong>(): <code>string</code>[]</p><h4 id="returns-13" tabindex="-1"><a class="header-anchor" href="#returns-13" aria-hidden="true">#</a> Returns</h4><p><code>string</code>[]</p><h4 id="defined-in-26" tabindex="-1"><a class="header-anchor" href="#defined-in-26" aria-hidden="true">#</a> Defined in</h4><p>src/renderer/default/renderer.ts:427</p><hr><h3 id="renderprompt" tabindex="-1"><a class="header-anchor" href="#renderprompt" aria-hidden="true">#</a> renderPrompt</h3><p>▸ <code>Private</code> <strong>renderPrompt</strong>(): <code>string</code>[]</p><h4 id="returns-14" tabindex="-1"><a class="header-anchor" href="#returns-14" aria-hidden="true">#</a> Returns</h4><p><code>string</code>[]</p><h4 id="defined-in-27" tabindex="-1"><a class="header-anchor" href="#defined-in-27" aria-hidden="true">#</a> Defined in</h4><p>src/renderer/default/renderer.ts:449</p><hr><h3 id="dump" tabindex="-1"><a class="header-anchor" href="#dump" aria-hidden="true">#</a> dump</h3><p>▸ <code>Private</code> <strong>dump</strong>(<code>task</code>, <code>level</code>, <code>source?</code>): <code>string</code>[]</p><h4 id="parameters-11" tabindex="-1"><a class="header-anchor" href="#parameters-11" aria-hidden="true">#</a> Parameters</h4>',22),$t=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type"),e("th",{style:{"text-align":"left"}},"Default value")])],-1),Gt=e("td",{style:{"text-align":"left"}},[e("code",null,"task")],-1),Ht={style:{"text-align":"left"}},Jt=e("code",null,"ListrTaskObject",-1),Qt=e("code",null,"any",-1),ed=e("code",null,"DefaultRenderer",-1),td=e("td",{style:{"text-align":"left"}},[e("code",null,"undefined")],-1),dd=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"level")]),e("td",{style:{"text-align":"left"}},[e("code",null,"number")]),e("td",{style:{"text-align":"left"}},[e("code",null,"undefined")])],-1),nd=e("td",{style:{"text-align":"left"}},[e("code",null,"source")],-1),rd={style:{"text-align":"left"}},ad=e("code",null,"FAILED",-1),sd=e("code",null,"SKIPPED",-1),id=e("code",null,"OUTPUT",-1),od=e("td",{style:{"text-align":"left"}},[e("code",null,"LogLevels.OUTPUT")],-1),ld=a('<h4 id="returns-15" tabindex="-1"><a class="header-anchor" href="#returns-15" aria-hidden="true">#</a> Returns</h4><p><code>string</code>[]</p><h4 id="defined-in-28" tabindex="-1"><a class="header-anchor" href="#defined-in-28" aria-hidden="true">#</a> Defined in</h4><p>src/renderer/default/renderer.ts:457</p><hr><h3 id="indent" tabindex="-1"><a class="header-anchor" href="#indent" aria-hidden="true">#</a> indent</h3><p>▸ <code>Private</code> <strong>indent</strong>(<code>str</code>, <code>i</code>): <code>string</code></p><h4 id="parameters-12" tabindex="-1"><a class="header-anchor" href="#parameters-12" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>str</code></td><td style="text-align:left;"><code>string</code></td></tr><tr><td style="text-align:left;"><code>i</code></td><td style="text-align:left;"><code>number</code></td></tr></tbody></table><h4 id="returns-16" tabindex="-1"><a class="header-anchor" href="#returns-16" aria-hidden="true">#</a> Returns</h4><p><code>string</code></p><h4 id="defined-in-29" tabindex="-1"><a class="header-anchor" href="#defined-in-29" aria-hidden="true">#</a> Defined in</h4><p>src/renderer/default/renderer.ts:489</p>',13);function cd(hd,ud){const n=s("RouterLink"),i=s("ExternalLinkIcon");return l(),c("div",null,[u,f,p,e("ul",null,[e("li",null,[d(n,{to:"/api/classes/ListrRenderer.html"},{default:r(()=>[_]),_:1})])]),m,e("p",null,[d(n,{to:"/api/classes/ListrRenderer.html"},{default:r(()=>[t("ListrRenderer")]),_:1}),t("."),d(n,{to:"/api/classes/ListrRenderer.html#nontty"},{default:r(()=>[t("nonTTY")]),_:1})]),g,x,b,y,e("p",null,[t("▪ "),v,t(),D,t(": "),d(n,{to:"/api/interfaces/DefaultRendererOptions.html"},{default:r(()=>[R]),_:1})]),k,T,e("p",null,[d(n,{to:"/api/classes/ListrRenderer.html"},{default:r(()=>[t("ListrRenderer")]),_:1}),t("."),d(n,{to:"/api/classes/ListrRenderer.html#rendereroptions"},{default:r(()=>[t("rendererOptions")]),_:1})]),L,O,P,w,e("p",null,[t("▪ "),N,t(),B,t(": "),d(n,{to:"/api/interfaces/DefaultRendererTaskOptions.html"},{default:r(()=>[j]),_:1})]),E,I,e("p",null,[d(n,{to:"/api/classes/ListrRenderer.html"},{default:r(()=>[t("ListrRenderer")]),_:1}),t("."),d(n,{to:"/api/classes/ListrRenderer.html#renderertaskoptions"},{default:r(()=>[t("rendererTaskOptions")]),_:1})]),S,e("p",null,[t("• "),A,t(),C,t(),K,t(": "),d(n,{to:"/api/classes/Spinner.html"},{default:r(()=>[M]),_:1})]),U,V,Y,z,e("p",null,[t("• "),W,t(),q,t(),F,t(": "),d(n,{to:"/api/classes/ListrLogger.html"},{default:r(()=>[X]),_:1})]),Z,e("table",null,[$,e("tbody",null,[e("tr",null,[G,H,e("td",J,[t("String with ANSI escape codes. Like one styled by "),e("a",Q,[ee,d(i)]),t(". Newline characters will be normalized to "),te,t(".")])]),de,ne])]),re,e("p",null,[t("• "),ae,t(),se,t(),ie,t(": "),d(n,{to:"/api/types/ListrDefaultRendererTasks.html"},{default:r(()=>[oe]),_:1})]),le,ce,he,ue,e("p",null,[t("• "),fe,t(),pe,t(),_e,t(": "),d(n,{to:"/api/interfaces/DefaultRendererOptions.html"},{default:r(()=>[me]),_:1})]),ge,xe,be,ye,e("p",null,[t("• "),ve,t(),De,t(),Re,t(": "),d(n,{to:"/api/classes/ListrEventManager.html"},{default:r(()=>[ke]),_:1})]),Te,e("table",null,[Le,e("tbody",null,[e("tr",null,[Oe,e("td",Pe,[d(n,{to:"/api/types/ListrDefaultRendererTasks.html"},{default:r(()=>[we]),_:1})])]),e("tr",null,[Ne,e("td",Be,[d(n,{to:"/api/interfaces/DefaultRendererOptions.html"},{default:r(()=>[je]),_:1})])]),e("tr",null,[Ee,e("td",Ie,[d(n,{to:"/api/classes/ListrEventManager.html"},{default:r(()=>[Se]),_:1})])])])]),Ae,e("p",null,[t("▸ "),Ce,t("("),Ke,t("): "),d(n,{to:"/api/interfaces/DefaultRendererTaskOptions.html"},{default:r(()=>[Me]),_:1})]),Ue,e("table",null,[Ve,e("tbody",null,[e("tr",null,[Ye,e("td",ze,[d(n,{to:"/api/classes/ListrTaskObject.html"},{default:r(()=>[We]),_:1}),t("<"),qe,t(", typeof "),d(n,{to:"/api/classes/DefaultRenderer.html"},{default:r(()=>[Fe]),_:1}),t(">")])])])]),Xe,e("p",null,[d(n,{to:"/api/interfaces/DefaultRendererTaskOptions.html"},{default:r(()=>[Ze]),_:1})]),$e,e("table",null,[Ge,e("tbody",null,[e("tr",null,[He,e("td",Je,[d(n,{to:"/api/classes/ListrTaskObject.html"},{default:r(()=>[Qe]),_:1}),t("<"),et,t(", typeof "),d(n,{to:"/api/classes/DefaultRenderer.html"},{default:r(()=>[tt]),_:1}),t(">")])])])]),dt,e("table",null,[nt,e("tbody",null,[e("tr",null,[rt,e("td",at,[d(n,{to:"/api/classes/ListrTaskObject.html"},{default:r(()=>[st]),_:1}),t("<"),it,t(", typeof "),d(n,{to:"/api/classes/DefaultRenderer.html"},{default:r(()=>[ot]),_:1}),t(">")])])])]),lt,e("p",null,[t("▸ "),ct,t("<"),ht,t(">("),ut,t(", "),ft,t("): "),d(n,{to:"/api/interfaces/DefaultRendererOptions.html"},{default:r(()=>[pt]),_:1}),t("["),_t,t("]")]),mt,e("table",null,[gt,e("tbody",null,[e("tr",null,[xt,e("td",bt,[t("extends keyof "),d(n,{to:"/api/interfaces/DefaultRendererOptions.html"},{default:r(()=>[yt]),_:1})])])])]),vt,e("table",null,[Dt,e("tbody",null,[e("tr",null,[Rt,e("td",kt,[d(n,{to:"/api/classes/ListrTaskObject.html"},{default:r(()=>[Tt]),_:1}),t("<"),Lt,t(", typeof "),d(n,{to:"/api/classes/DefaultRenderer.html"},{default:r(()=>[Ot]),_:1}),t(">")])]),Pt])]),wt,e("p",null,[d(n,{to:"/api/interfaces/DefaultRendererOptions.html"},{default:r(()=>[Nt]),_:1}),t("["),Bt,t("]")]),jt,e("table",null,[Et,e("tbody",null,[e("tr",null,[It,e("td",St,[d(n,{to:"/api/classes/ListrTaskObject.html"},{default:r(()=>[At]),_:1}),t("<"),Ct,t(", typeof "),d(n,{to:"/api/classes/DefaultRenderer.html"},{default:r(()=>[Kt]),_:1}),t(">")]),Mt]),Ut])]),Vt,e("table",null,[Yt,e("tbody",null,[e("tr",null,[zt,e("td",Wt,[d(n,{to:"/api/types/ListrDefaultRendererTasks.html"},{default:r(()=>[qt]),_:1})]),Ft]),Xt])]),Zt,e("table",null,[$t,e("tbody",null,[e("tr",null,[Gt,e("td",Ht,[d(n,{to:"/api/classes/ListrTaskObject.html"},{default:r(()=>[Jt]),_:1}),t("<"),Qt,t(", typeof "),d(n,{to:"/api/classes/DefaultRenderer.html"},{default:r(()=>[ed]),_:1}),t(">")]),td]),dd,e("tr",null,[nd,e("td",rd,[d(n,{to:"/api/enums/LogLevels.html#failed"},{default:r(()=>[ad]),_:1}),t(" | "),d(n,{to:"/api/enums/LogLevels.html#skipped"},{default:r(()=>[sd]),_:1}),t(" | "),d(n,{to:"/api/enums/LogLevels.html#output"},{default:r(()=>[id]),_:1})]),od])])]),ld])}const pd=o(h,[["render",cd],["__file","DefaultRenderer.html.vue"]]);export{pd as default};
