import{_ as o,W as d,X as s,Y as e,Z as n,a2 as i,$ as r,a5 as a,D as l}from"./framework-4c9bc095.js";const c={},h=e("h1",{id:"interface-listrbaseclassoptions-ctx-renderer-fallbackrenderer",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#interface-listrbaseclassoptions-ctx-renderer-fallbackrenderer","aria-hidden":"true"},"#"),r(" Interface: ListrBaseClassOptions<Ctx, Renderer, FallbackRenderer>")],-1),f=e("p",null,"Parent class options.",-1),p=e("p",null,"Parent class has more options where you can also select the and set renderer and non-tty renderer.",-1),u=e("p",null,"Any subtasks will respect those options so they will be stripped of that properties.",-1),_=e("h2",{id:"type-parameters",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#type-parameters","aria-hidden":"true"},"#"),r(" Type parameters")],-1),m=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type")])],-1),b=e("td",{style:{"text-align":"left"}},[e("code",null,"Ctx")],-1),g={style:{"text-align":"left"}},x=e("code",null,"ListrContext",-1),O=e("td",{style:{"text-align":"left"}},[e("code",null,"Renderer")],-1),L={style:{"text-align":"left"}},y=e("code",null,"ListrRendererValue",-1),k=e("code",null,"ListrDefaultRendererValue",-1),R=e("td",{style:{"text-align":"left"}},[e("code",null,"FallbackRenderer")],-1),D={style:{"text-align":"left"}},I=e("code",null,"ListrRendererValue",-1),C=e("code",null,"ListrFallbackRendererValue",-1),T=e("h2",{id:"hierarchy",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#hierarchy","aria-hidden":"true"},"#"),r(" Hierarchy")],-1),w=e("code",null,"ListrOptions",-1),S=e("code",null,"Ctx",-1),F=e("code",null,"ListrPrimaryRendererOptions",-1),V=e("code",null,"Renderer",-1),P=e("code",null,"ListrSecondaryRendererOptions",-1),j=e("code",null,"FallbackRenderer",-1),E=e("p",null,[r("↳ "),e("strong",null,[e("code",null,"ListrBaseClassOptions")])],-1),q=a('<h2 id="properties" tabindex="-1"><a class="header-anchor" href="#properties" aria-hidden="true">#</a> Properties</h2><h3 id="ctx" tabindex="-1"><a class="header-anchor" href="#ctx" aria-hidden="true">#</a> ctx</h3><p>• <code>Optional</code> <strong>ctx</strong>: <code>Ctx</code></p><p>To inject a context through this options wrapper. Context can also be defined in run time.</p><p><strong><code>Default</code></strong></p><h4 id="inherited-from" tabindex="-1"><a class="header-anchor" href="#inherited-from" aria-hidden="true">#</a> Inherited from</h4>',6),v=a('<h4 id="defined-in" tabindex="-1"><a class="header-anchor" href="#defined-in" aria-hidden="true">#</a> Defined in</h4><p>src/interfaces/listr.interface.ts:17</p><hr><h3 id="concurrent" tabindex="-1"><a class="header-anchor" href="#concurrent" aria-hidden="true">#</a> concurrent</h3><p>• <code>Optional</code> <strong>concurrent</strong>: <code>number</code> | <code>boolean</code></p><p>Concurrency sets how many tasks will be run at the same time in parallel.</p><p><strong><code>Default</code></strong></p><p>false &gt; Default is to run everything synchronously.</p><p><code>true</code> will set it to <code>Infinity</code>, <code>false</code> will set it to synchronous.</p><p>If you pass in a <code>number</code> it will limit it to that number.</p><h4 id="inherited-from-1" tabindex="-1"><a class="header-anchor" href="#inherited-from-1" aria-hidden="true">#</a> Inherited from</h4>',11),B=a('<h4 id="defined-in-1" tabindex="-1"><a class="header-anchor" href="#defined-in-1" aria-hidden="true">#</a> Defined in</h4><p>src/interfaces/listr.interface.ts:27</p><hr><h3 id="exitonerror" tabindex="-1"><a class="header-anchor" href="#exitonerror" aria-hidden="true">#</a> exitOnError</h3><p>• <code>Optional</code> <strong>exitOnError</strong>: <code>boolean</code></p><p>Determine the default behavior of exiting on errors.</p><p><strong><code>Default</code></strong></p><p>true &gt; exit on any error coming from the tasks.</p><h4 id="inherited-from-2" tabindex="-1"><a class="header-anchor" href="#inherited-from-2" aria-hidden="true">#</a> Inherited from</h4>',9),N=a('<h4 id="defined-in-2" tabindex="-1"><a class="header-anchor" href="#defined-in-2" aria-hidden="true">#</a> Defined in</h4><p>src/interfaces/listr.interface.ts:33</p><hr><h3 id="exitafterrollback" tabindex="-1"><a class="header-anchor" href="#exitafterrollback" aria-hidden="true">#</a> exitAfterRollback</h3><p>• <code>Optional</code> <strong>exitAfterRollback</strong>: <code>boolean</code></p><p>Determine the behavior of exiting after rollback actions.</p><p>This is independent of exitOnError, since failure of a rollback can be a more critical operation comparing to failing a single task.</p><p><strong><code>Default</code></strong></p><p>true &gt; exit after rolling back tasks</p><h4 id="inherited-from-3" tabindex="-1"><a class="header-anchor" href="#inherited-from-3" aria-hidden="true">#</a> Inherited from</h4>',10),Y=a('<h4 id="defined-in-3" tabindex="-1"><a class="header-anchor" href="#defined-in-3" aria-hidden="true">#</a> Defined in</h4><p>src/interfaces/listr.interface.ts:42</p><hr><h3 id="collecterrors" tabindex="-1"><a class="header-anchor" href="#collecterrors" aria-hidden="true">#</a> collectErrors</h3><p>• <code>Optional</code> <strong>collectErrors</strong>: <code>false</code> | <code>&quot;minimal&quot;</code> | <code>&quot;full&quot;</code></p><p>Collects errors to <code>ListrInstance.errors</code></p><p>This can take up a lot of memory, so disabling it can fix out-of-memory errors</p><ul><li>&#39;full&#39; will clone the current context and task in to the error instance</li><li>&#39;minimal&#39; will only collect the error message and the location</li><li>false will collect no errors</li></ul><p><strong><code>Default</code></strong></p><p>&#39;minimal&#39;</p><h4 id="inherited-from-4" tabindex="-1"><a class="header-anchor" href="#inherited-from-4" aria-hidden="true">#</a> Inherited from</h4>',11),G=a('<h4 id="defined-in-4" tabindex="-1"><a class="header-anchor" href="#defined-in-4" aria-hidden="true">#</a> Defined in</h4><p>src/interfaces/listr.interface.ts:54</p><hr><h3 id="registersignallisteners" tabindex="-1"><a class="header-anchor" href="#registersignallisteners" aria-hidden="true">#</a> registerSignalListeners</h3><p>• <code>Optional</code> <strong>registerSignalListeners</strong>: <code>boolean</code></p><p>By default, Listr2 will track SIGINIT signal to update the renderer one last time before completely failing.</p><p><strong><code>Default</code></strong></p><p>true</p><h4 id="inherited-from-5" tabindex="-1"><a class="header-anchor" href="#inherited-from-5" aria-hidden="true">#</a> Inherited from</h4>',9),W=a('<h4 id="defined-in-5" tabindex="-1"><a class="header-anchor" href="#defined-in-5" aria-hidden="true">#</a> Defined in</h4><p>src/interfaces/listr.interface.ts:60</p><hr><h3 id="rendererfallback" tabindex="-1"><a class="header-anchor" href="#rendererfallback" aria-hidden="true">#</a> rendererFallback</h3><p>• <code>Optional</code> <strong>rendererFallback</strong>: <code>boolean</code> | () =&gt; <code>boolean</code></p><p>Determine the certain condition required to use the non-TTY renderer.</p><p><strong><code>Default</code></strong></p><p>null &gt; handled internally</p><h4 id="inherited-from-6" tabindex="-1"><a class="header-anchor" href="#inherited-from-6" aria-hidden="true">#</a> Inherited from</h4>',9),A=a('<h4 id="defined-in-6" tabindex="-1"><a class="header-anchor" href="#defined-in-6" aria-hidden="true">#</a> Defined in</h4><p>src/interfaces/listr.interface.ts:66</p><hr><h3 id="renderersilent" tabindex="-1"><a class="header-anchor" href="#renderersilent" aria-hidden="true">#</a> rendererSilent</h3><p>• <code>Optional</code> <strong>rendererSilent</strong>: <code>boolean</code> | () =&gt; <code>boolean</code></p><p>Determine the certain condition required to use the silent renderer.</p><p><strong><code>Default</code></strong></p><p>null &gt; handled internally</p><h4 id="inherited-from-7" tabindex="-1"><a class="header-anchor" href="#inherited-from-7" aria-hidden="true">#</a> Inherited from</h4>',9),U=a('<h4 id="defined-in-7" tabindex="-1"><a class="header-anchor" href="#defined-in-7" aria-hidden="true">#</a> Defined in</h4><p>src/interfaces/listr.interface.ts:72</p><hr><h3 id="disablecolor" tabindex="-1"><a class="header-anchor" href="#disablecolor" aria-hidden="true">#</a> disableColor</h3><p>• <code>Optional</code> <strong>disableColor</strong>: <code>boolean</code></p><p>Disabling the color, useful for tests and such.</p><p><strong><code>Default</code></strong></p><p>false</p><h4 id="inherited-from-8" tabindex="-1"><a class="header-anchor" href="#inherited-from-8" aria-hidden="true">#</a> Inherited from</h4>',9),H=a('<h4 id="defined-in-8" tabindex="-1"><a class="header-anchor" href="#defined-in-8" aria-hidden="true">#</a> Defined in</h4><p>src/interfaces/listr.interface.ts:78</p><hr><h3 id="forcecolor" tabindex="-1"><a class="header-anchor" href="#forcecolor" aria-hidden="true">#</a> forceColor</h3><p>• <code>Optional</code> <strong>forceColor</strong>: <code>boolean</code></p><p>Forces usage of color.</p><p><strong><code>Default</code></strong></p><p>false</p><h4 id="inherited-from-9" tabindex="-1"><a class="header-anchor" href="#inherited-from-9" aria-hidden="true">#</a> Inherited from</h4>',9),X=a('<h4 id="defined-in-9" tabindex="-1"><a class="header-anchor" href="#defined-in-9" aria-hidden="true">#</a> Defined in</h4><p>src/interfaces/listr.interface.ts:84</p><hr><h3 id="forcetty" tabindex="-1"><a class="header-anchor" href="#forcetty" aria-hidden="true">#</a> forceTTY</h3><p>• <code>Optional</code> <strong>forceTTY</strong>: <code>boolean</code></p><p>Forces TTY stdout eventhough current terminal might not support it.</p><p><strong><code>Default</code></strong></p><p>false</p><h4 id="inherited-from-10" tabindex="-1"><a class="header-anchor" href="#inherited-from-10" aria-hidden="true">#</a> Inherited from</h4>',9),Z=a('<h4 id="defined-in-10" tabindex="-1"><a class="header-anchor" href="#defined-in-10" aria-hidden="true">#</a> Defined in</h4><p>src/interfaces/listr.interface.ts:90</p><hr><h3 id="forceunicode" tabindex="-1"><a class="header-anchor" href="#forceunicode" aria-hidden="true">#</a> forceUnicode</h3><p>• <code>Optional</code> <strong>forceUnicode</strong>: <code>boolean</code></p><p>Forces unicode eventhough current terminal might not support it.</p><p><strong><code>Default</code></strong></p><p>false</p><h4 id="inherited-from-11" tabindex="-1"><a class="header-anchor" href="#inherited-from-11" aria-hidden="true">#</a> Inherited from</h4>',9),$=a('<h4 id="defined-in-11" tabindex="-1"><a class="header-anchor" href="#defined-in-11" aria-hidden="true">#</a> Defined in</h4><p>src/interfaces/listr.interface.ts:96</p><hr><h3 id="injectwrapper" tabindex="-1"><a class="header-anchor" href="#injectwrapper" aria-hidden="true">#</a> injectWrapper</h3><p>• <code>Optional</code> <strong>injectWrapper</strong>: <code>Object</code></p><p>Inject data directly to TaskWrapper.</p><h4 id="type-declaration" tabindex="-1"><a class="header-anchor" href="#type-declaration" aria-hidden="true">#</a> Type declaration</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>enquirer?</code></td><td style="text-align:left;"><code>Enquirer</code>&lt;<code>object</code>&gt;</td></tr></tbody></table><h4 id="inherited-from-12" tabindex="-1"><a class="header-anchor" href="#inherited-from-12" aria-hidden="true">#</a> Inherited from</h4>',9),z=a('<h4 id="defined-in-12" tabindex="-1"><a class="header-anchor" href="#defined-in-12" aria-hidden="true">#</a> Defined in</h4><p>src/interfaces/listr.interface.ts:100</p><hr><h3 id="renderer" tabindex="-1"><a class="header-anchor" href="#renderer" aria-hidden="true">#</a> renderer</h3><p>• <code>Optional</code> <strong>renderer</strong>: <code>Renderer</code></p><p>the default renderer</p><h4 id="inherited-from-13" tabindex="-1"><a class="header-anchor" href="#inherited-from-13" aria-hidden="true">#</a> Inherited from</h4>',7),J=e("h4",{id:"defined-in-13",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-13","aria-hidden":"true"},"#"),r(" Defined in")],-1),K=e("p",null,"src/interfaces/renderer.interface.ts:84",-1),M=e("hr",null,null,-1),Q=e("h3",{id:"rendereroptions",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#rendereroptions","aria-hidden":"true"},"#"),r(" rendererOptions")],-1),ee=e("code",null,"Optional",-1),re=e("strong",null,"rendererOptions",-1),te=e("code",null,"ListrGetRendererOptions",-1),ne=e("code",null,"Renderer",-1),ie=e("p",null,"Renderer options depending on the current renderer",-1),ae=e("h4",{id:"inherited-from-14",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#inherited-from-14","aria-hidden":"true"},"#"),r(" Inherited from")],-1),oe=a('<h4 id="defined-in-14" tabindex="-1"><a class="header-anchor" href="#defined-in-14" aria-hidden="true">#</a> Defined in</h4><p>src/interfaces/renderer.interface.ts:86</p><hr><h3 id="fallbackrenderer" tabindex="-1"><a class="header-anchor" href="#fallbackrenderer" aria-hidden="true">#</a> fallbackRenderer</h3><p>• <code>Optional</code> <strong>fallbackRenderer</strong>: <code>FallbackRenderer</code></p><p>the fallback renderer to fallback to on non-tty conditions</p><h4 id="inherited-from-15" tabindex="-1"><a class="header-anchor" href="#inherited-from-15" aria-hidden="true">#</a> Inherited from</h4>',7),de=e("h4",{id:"defined-in-15",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-15","aria-hidden":"true"},"#"),r(" Defined in")],-1),se=e("p",null,"src/interfaces/renderer.interface.ts:92",-1),le=e("hr",null,null,-1),ce=e("h3",{id:"fallbackrendereroptions",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#fallbackrendereroptions","aria-hidden":"true"},"#"),r(" fallbackRendererOptions")],-1),he=e("code",null,"Optional",-1),fe=e("strong",null,"fallbackRendererOptions",-1),pe=e("code",null,"ListrGetRendererOptions",-1),ue=e("code",null,"FallbackRenderer",-1),_e=e("p",null,"Renderer options depending on the current renderer",-1),me=e("h4",{id:"inherited-from-16",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#inherited-from-16","aria-hidden":"true"},"#"),r(" Inherited from")],-1),be=e("h4",{id:"defined-in-16",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-16","aria-hidden":"true"},"#"),r(" Defined in")],-1),ge=e("p",null,"src/interfaces/renderer.interface.ts:94",-1);function xe(Oe,Le){const t=l("RouterLink");return d(),s("div",null,[h,f,p,u,_,e("table",null,[m,e("tbody",null,[e("tr",null,[b,e("td",g,[n(t,{to:"/api/types/ListrContext.html"},{default:i(()=>[x]),_:1})])]),e("tr",null,[O,e("td",L,[r("extends "),n(t,{to:"/api/types/ListrRendererValue.html"},{default:i(()=>[y]),_:1}),r(" = "),n(t,{to:"/api/types/ListrDefaultRendererValue.html"},{default:i(()=>[k]),_:1})])]),e("tr",null,[R,e("td",D,[r("extends "),n(t,{to:"/api/types/ListrRendererValue.html"},{default:i(()=>[I]),_:1}),r(" = "),n(t,{to:"/api/types/ListrFallbackRendererValue.html"},{default:i(()=>[C]),_:1})])])])]),T,e("ul",null,[e("li",null,[e("p",null,[n(t,{to:"/api/interfaces/ListrOptions.html"},{default:i(()=>[w]),_:1}),r("<"),S,r(">")])]),e("li",null,[e("p",null,[n(t,{to:"/api/interfaces/ListrPrimaryRendererOptions.html"},{default:i(()=>[F]),_:1}),r("<"),V,r(">")])]),e("li",null,[e("p",null,[n(t,{to:"/api/interfaces/ListrSecondaryRendererOptions.html"},{default:i(()=>[P]),_:1}),r("<"),j,r(">")]),E])]),q,e("p",null,[n(t,{to:"/api/interfaces/ListrOptions.html"},{default:i(()=>[r("ListrOptions")]),_:1}),r("."),n(t,{to:"/api/interfaces/ListrOptions.html#ctx"},{default:i(()=>[r("ctx")]),_:1})]),v,e("p",null,[n(t,{to:"/api/interfaces/ListrOptions.html"},{default:i(()=>[r("ListrOptions")]),_:1}),r("."),n(t,{to:"/api/interfaces/ListrOptions.html#concurrent"},{default:i(()=>[r("concurrent")]),_:1})]),B,e("p",null,[n(t,{to:"/api/interfaces/ListrOptions.html"},{default:i(()=>[r("ListrOptions")]),_:1}),r("."),n(t,{to:"/api/interfaces/ListrOptions.html#exitonerror"},{default:i(()=>[r("exitOnError")]),_:1})]),N,e("p",null,[n(t,{to:"/api/interfaces/ListrOptions.html"},{default:i(()=>[r("ListrOptions")]),_:1}),r("."),n(t,{to:"/api/interfaces/ListrOptions.html#exitafterrollback"},{default:i(()=>[r("exitAfterRollback")]),_:1})]),Y,e("p",null,[n(t,{to:"/api/interfaces/ListrOptions.html"},{default:i(()=>[r("ListrOptions")]),_:1}),r("."),n(t,{to:"/api/interfaces/ListrOptions.html#collecterrors"},{default:i(()=>[r("collectErrors")]),_:1})]),G,e("p",null,[n(t,{to:"/api/interfaces/ListrOptions.html"},{default:i(()=>[r("ListrOptions")]),_:1}),r("."),n(t,{to:"/api/interfaces/ListrOptions.html#registersignallisteners"},{default:i(()=>[r("registerSignalListeners")]),_:1})]),W,e("p",null,[n(t,{to:"/api/interfaces/ListrOptions.html"},{default:i(()=>[r("ListrOptions")]),_:1}),r("."),n(t,{to:"/api/interfaces/ListrOptions.html#rendererfallback"},{default:i(()=>[r("rendererFallback")]),_:1})]),A,e("p",null,[n(t,{to:"/api/interfaces/ListrOptions.html"},{default:i(()=>[r("ListrOptions")]),_:1}),r("."),n(t,{to:"/api/interfaces/ListrOptions.html#renderersilent"},{default:i(()=>[r("rendererSilent")]),_:1})]),U,e("p",null,[n(t,{to:"/api/interfaces/ListrOptions.html"},{default:i(()=>[r("ListrOptions")]),_:1}),r("."),n(t,{to:"/api/interfaces/ListrOptions.html#disablecolor"},{default:i(()=>[r("disableColor")]),_:1})]),H,e("p",null,[n(t,{to:"/api/interfaces/ListrOptions.html"},{default:i(()=>[r("ListrOptions")]),_:1}),r("."),n(t,{to:"/api/interfaces/ListrOptions.html#forcecolor"},{default:i(()=>[r("forceColor")]),_:1})]),X,e("p",null,[n(t,{to:"/api/interfaces/ListrOptions.html"},{default:i(()=>[r("ListrOptions")]),_:1}),r("."),n(t,{to:"/api/interfaces/ListrOptions.html#forcetty"},{default:i(()=>[r("forceTTY")]),_:1})]),Z,e("p",null,[n(t,{to:"/api/interfaces/ListrOptions.html"},{default:i(()=>[r("ListrOptions")]),_:1}),r("."),n(t,{to:"/api/interfaces/ListrOptions.html#forceunicode"},{default:i(()=>[r("forceUnicode")]),_:1})]),$,e("p",null,[n(t,{to:"/api/interfaces/ListrOptions.html"},{default:i(()=>[r("ListrOptions")]),_:1}),r("."),n(t,{to:"/api/interfaces/ListrOptions.html#injectwrapper"},{default:i(()=>[r("injectWrapper")]),_:1})]),z,e("p",null,[n(t,{to:"/api/interfaces/ListrPrimaryRendererOptions.html"},{default:i(()=>[r("ListrPrimaryRendererOptions")]),_:1}),r("."),n(t,{to:"/api/interfaces/ListrPrimaryRendererOptions.html#renderer"},{default:i(()=>[r("renderer")]),_:1})]),J,K,M,Q,e("p",null,[r("• "),ee,r(),re,r(": "),n(t,{to:"/api/types/ListrGetRendererOptions.html"},{default:i(()=>[te]),_:1}),r("<"),ne,r(">")]),ie,ae,e("p",null,[n(t,{to:"/api/interfaces/ListrPrimaryRendererOptions.html"},{default:i(()=>[r("ListrPrimaryRendererOptions")]),_:1}),r("."),n(t,{to:"/api/interfaces/ListrPrimaryRendererOptions.html#rendereroptions"},{default:i(()=>[r("rendererOptions")]),_:1})]),oe,e("p",null,[n(t,{to:"/api/interfaces/ListrSecondaryRendererOptions.html"},{default:i(()=>[r("ListrSecondaryRendererOptions")]),_:1}),r("."),n(t,{to:"/api/interfaces/ListrSecondaryRendererOptions.html#fallbackrenderer"},{default:i(()=>[r("fallbackRenderer")]),_:1})]),de,se,le,ce,e("p",null,[r("• "),he,r(),fe,r(": "),n(t,{to:"/api/types/ListrGetRendererOptions.html"},{default:i(()=>[pe]),_:1}),r("<"),ue,r(">")]),_e,me,e("p",null,[n(t,{to:"/api/interfaces/ListrSecondaryRendererOptions.html"},{default:i(()=>[r("ListrSecondaryRendererOptions")]),_:1}),r("."),n(t,{to:"/api/interfaces/ListrSecondaryRendererOptions.html#fallbackrendereroptions"},{default:i(()=>[r("fallbackRendererOptions")]),_:1})]),be,ge])}const ke=o(c,[["render",xe],["__file","ListrBaseClassOptions.html.vue"]]);export{ke as default};
