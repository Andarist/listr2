import{_ as i,W as u,X as k,a4 as r,Y as n,Z as a,$ as s,a2 as e,a5 as t,D as o}from"./framework-4c9bc095.js";const d={},v=n("p",null,"You can create a custom renderer that is fit for your application.",-1),m=t(`<h2 id="implement-or-extend-the-default-listr-renderer" tabindex="-1"><a class="header-anchor" href="#implement-or-extend-the-default-listr-renderer" aria-hidden="true">#</a> Implement or Extend the Default <a href="/api/classes/Listr.html" target="_blank">Listr</a> Renderer</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> ListrRenderer<span class="token punctuation">,</span> ListrTaskObject <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;listr2&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Listr <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;listr2&#39;</span>

<span class="token keyword">type</span> <span class="token class-name">MyAmazingRendererOptions</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> MyAmazingRenderer<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&#39;rendererOptions&#39;</span><span class="token punctuation">]</span>

<span class="token keyword">type</span> <span class="token class-name">MyAmazingRendererTasks</span> <span class="token operator">=</span> ListrTaskObject<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span> MyAmazingRenderer<span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span>

<span class="token keyword">class</span> <span class="token class-name">MyAmazingRenderer</span> <span class="token keyword">implements</span> <span class="token class-name">ListrRenderer</span> <span class="token punctuation">{</span>
  <span class="token comment">// Designate this renderer as tty or nonTTY</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> nonTTY <span class="token operator">=</span> <span class="token boolean">true</span>
  <span class="token comment">// designate your renderer options that will be showed inside the \`ListrOptions\` as rendererOptions</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> rendererOptions<span class="token operator">:</span> <span class="token builtin">never</span>
  <span class="token comment">// designate your custom internal task-based options that will show as \`options\` in the task itself</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> rendererTaskOptions<span class="token operator">:</span> <span class="token builtin">never</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">Info</p><p>For Javascript, since you cannot implement <code>ListrRenderer</code>, you can extend either the <em>SilentRenderer</em> or <code>ListrBaseRenderer</code>.</p></div><h2 id="utilizing-the-task" tabindex="-1"><a class="header-anchor" href="#utilizing-the-task" aria-hidden="true">#</a> Utilizing the <a href="/api/interfaces/ListrTask.html#properties" target="_blank">Task</a></h2><p>Take a look at <a href="/renderer/default.html" target="_blank">DefaultRenderer</a> since it is implemented this way.</p>`,5),b={class:"hint-container details"},y=t(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token class-name">truncate</span> <span class="token keyword">from</span> <span class="token string">&#39;cli-truncate&#39;</span>
<span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> createLogUpdate <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;log-update&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">EOL</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;os&#39;</span>
<span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token class-name">wrap</span> <span class="token keyword">from</span> <span class="token string">&#39;wrap-ansi&#39;</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">LISTR_DEFAULT_RENDERER_STYLE</span><span class="token punctuation">,</span> ListrDefaultRendererLogLevels <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./renderer.constants&#39;</span>
<span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> DefaultRendererOptions<span class="token punctuation">,</span> DefaultRendererTaskOptions<span class="token punctuation">,</span> ListrDefaultRendererOptions<span class="token punctuation">,</span> ListrDefaultRendererTasks <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./renderer.interface&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ListrEventType<span class="token punctuation">,</span> ListrTaskEventType<span class="token punctuation">,</span> ListrTaskState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@constants&#39;</span>
<span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> ListrContext<span class="token punctuation">,</span> ListrRenderer<span class="token punctuation">,</span> ListrTaskEventMap <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@interfaces&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> PromptError <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@interfaces&#39;</span>
<span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> ListrEventManager<span class="token punctuation">,</span> Task <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@lib&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ListrLogger<span class="token punctuation">,</span> LogLevels<span class="token punctuation">,</span> Spinner<span class="token punctuation">,</span> assertFunctionOrSelf<span class="token punctuation">,</span> cleanseAnsi<span class="token punctuation">,</span> color<span class="token punctuation">,</span> indent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@utils&#39;</span>

<span class="token doc-comment comment">/** Default updating renderer for Listr2 */</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">DefaultRenderer</span> <span class="token keyword">implements</span> <span class="token class-name">ListrRenderer</span> <span class="token punctuation">{</span>
  <span class="token doc-comment comment">/** designates whether this renderer can output to a non-tty console */</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> nonTTY <span class="token operator">=</span> <span class="token boolean">false</span>
  <span class="token doc-comment comment">/** renderer options for the defauult renderer */</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> rendererOptions<span class="token operator">:</span> DefaultRendererOptions <span class="token operator">=</span> <span class="token punctuation">{</span>
    indentation<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
    clearOutput<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    showSubtasks<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    collapse<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    collapseSkips<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    showSkipMessage<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    suffixSkips<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    collapseErrors<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    showErrorMessage<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    suffixRetries<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    lazy<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    removeEmptyLines<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    formatOutput<span class="token operator">:</span> <span class="token string">&#39;wrap&#39;</span><span class="token punctuation">,</span>
    logger<span class="token operator">:</span> ListrLogger
  <span class="token punctuation">}</span>

  <span class="token doc-comment comment">/** per task options for the default renderer */</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> rendererTaskOptions<span class="token operator">:</span> DefaultRendererTaskOptions

  <span class="token keyword">private</span> bottom<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> data<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> items<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">private</span> prompt<span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token keyword">private</span> activePrompt<span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token keyword">private</span> <span class="token keyword">readonly</span> spinner<span class="token operator">:</span> Spinner
  <span class="token keyword">private</span> <span class="token keyword">readonly</span> logger<span class="token operator">:</span> ListrLogger
  <span class="token keyword">private</span> updater<span class="token operator">:</span> ReturnType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> createLogUpdate<span class="token operator">&gt;</span>
  <span class="token keyword">private</span> truncate<span class="token operator">:</span> <span class="token keyword">typeof</span> truncate
  <span class="token keyword">private</span> wrap<span class="token operator">:</span> <span class="token keyword">typeof</span> wrap

  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">readonly</span> tasks<span class="token operator">:</span> ListrDefaultRendererTasks<span class="token punctuation">,</span> <span class="token keyword">private</span> <span class="token keyword">readonly</span> options<span class="token operator">:</span> ListrDefaultRendererOptions<span class="token punctuation">,</span> <span class="token keyword">private</span> <span class="token keyword">readonly</span> events<span class="token operator">:</span> ListrEventManager<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>options <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token operator">...</span>DefaultRenderer<span class="token punctuation">.</span>rendererOptions<span class="token punctuation">,</span>
      <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">,</span>
      style<span class="token operator">:</span> <span class="token punctuation">{</span>
        icon<span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token operator">...</span><span class="token constant">LISTR_DEFAULT_RENDERER_STYLE</span><span class="token punctuation">.</span>icon<span class="token punctuation">,</span>
          <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token operator">?.</span>style<span class="token operator">?.</span>icon <span class="token operator">??</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        color<span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token operator">...</span><span class="token constant">LISTR_DEFAULT_RENDERER_STYLE</span><span class="token punctuation">.</span>color<span class="token punctuation">,</span>
          <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token operator">?.</span>style<span class="token operator">?.</span>color <span class="token operator">??</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>logger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token keyword">this</span></span><span class="token punctuation">.</span>options<span class="token punctuation">.</span><span class="token function">logger</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>loggerOptions<span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>spinner <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>spinner <span class="token operator">??</span> <span class="token keyword">new</span> <span class="token class-name">Spinner</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token function">getTaskOptions</span> <span class="token punctuation">(</span>task<span class="token operator">:</span> Task<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span> DefaultRenderer<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> DefaultRenderer<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&#39;rendererTaskOptions&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>DefaultRenderer<span class="token punctuation">.</span>rendererTaskOptions<span class="token punctuation">,</span> <span class="token operator">...</span>task<span class="token punctuation">.</span>rendererTaskOptions <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token function">isBottomBar</span> <span class="token punctuation">(</span>task<span class="token operator">:</span> Task<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span> DefaultRenderer<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> bottomBar <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getTaskOptions</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">.</span>bottomBar

    <span class="token keyword">return</span> <span class="token keyword">typeof</span> bottomBar <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span> <span class="token operator">&amp;&amp;</span> bottomBar <span class="token operator">!==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> bottomBar <span class="token operator">===</span> <span class="token string">&#39;boolean&#39;</span> <span class="token operator">&amp;&amp;</span> bottomBar <span class="token operator">!==</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token function">hasPersistentOutput</span> <span class="token punctuation">(</span>task<span class="token operator">:</span> Task<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span> DefaultRenderer<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getTaskOptions</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">.</span>persistentOutput <span class="token operator">===</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token generic-function"><span class="token function">getSelfOrParentOption</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> ListrDefaultRendererOptions<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>task<span class="token operator">:</span> Task<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span> DefaultRenderer<span class="token operator">&gt;</span><span class="token punctuation">,</span> key<span class="token operator">:</span> <span class="token constant">K</span><span class="token punctuation">)</span><span class="token operator">:</span> ListrDefaultRendererOptions<span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> task<span class="token operator">?.</span>rendererOptions<span class="token operator">?.</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">??</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token operator">?.</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token function">render</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> createLogUpdate <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;log-update&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">default</span><span class="token operator">:</span> truncate <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;cli-truncate&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">default</span><span class="token operator">:</span> wrap <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;wrap-ansi&#39;</span><span class="token punctuation">)</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>updater <span class="token operator">=</span> <span class="token function">createLogUpdate</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span>process<span class="token punctuation">.</span>stdout<span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>truncate <span class="token operator">=</span> truncate
    <span class="token keyword">this</span><span class="token punctuation">.</span>wrap <span class="token operator">=</span> wrap

    <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span>process<span class="token punctuation">.</span><span class="token function">hijack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment">/* istanbul ignore if */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token operator">?.</span>lazy<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>spinner<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>ListrEventType<span class="token punctuation">.</span><span class="token constant">SHOULD_REFRESH_RENDER</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token function">update</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updater</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token function">end</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>spinner<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment">// clear log updater</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>updater<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>updater<span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment">// directly write to process.stdout, since logupdate only can update the seen height of terminal</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>clearOutput<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span>process<span class="token punctuation">.</span><span class="token function">toStdout</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span> prompt<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span>process<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token function">create</span> <span class="token punctuation">(</span>options<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span> tasks<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span> bottomBar<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span> prompt<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    options <span class="token operator">=</span> <span class="token punctuation">{</span>
      tasks<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      bottomBar<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      prompt<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token operator">...</span>options
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> render<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

    <span class="token keyword">const</span> renderTasks <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">renderer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tasks<span class="token punctuation">)</span>
    <span class="token keyword">const</span> renderBottomBar <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">renderBottomBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> renderPrompt <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">renderPrompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>tasks <span class="token operator">&amp;&amp;</span> renderTasks<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      render<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>renderTasks<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>bottomBar <span class="token operator">&amp;&amp;</span> renderBottomBar<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>render<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        render<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>

      render<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>renderBottomBar<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>prompt <span class="token operator">&amp;&amp;</span> renderPrompt<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>render<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        render<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>

      render<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>renderPrompt<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> render<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token constant">EOL</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// eslint-disable-next-line complexity</span>
  <span class="token keyword">protected</span> <span class="token function">style</span> <span class="token punctuation">(</span>task<span class="token operator">:</span> Task<span class="token operator">&lt;</span>ListrContext<span class="token punctuation">,</span> <span class="token keyword">typeof</span> DefaultRenderer<span class="token operator">&gt;</span><span class="token punctuation">,</span> output <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>task<span class="token punctuation">.</span><span class="token function">isSkipped</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>output <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSelfOrParentOption</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> <span class="token string">&#39;collapseSkips&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">icon</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>style<span class="token punctuation">,</span> ListrDefaultRendererLogLevels<span class="token punctuation">.</span><span class="token constant">SKIPPED_WITH_COLLAPSE</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSelfOrParentOption</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> <span class="token string">&#39;collapseSkips&#39;</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">icon</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>style<span class="token punctuation">,</span> ListrDefaultRendererLogLevels<span class="token punctuation">.</span><span class="token constant">SKIPPED_WITHOUT_COLLAPSE</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>output<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">icon</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>style<span class="token punctuation">,</span> ListrDefaultRendererLogLevels<span class="token punctuation">.</span><span class="token constant">OUTPUT</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>task<span class="token punctuation">.</span><span class="token function">hasSubtasks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>task<span class="token punctuation">.</span><span class="token function">isStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> task<span class="token punctuation">.</span><span class="token function">isPrompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSelfOrParentOption</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> <span class="token string">&#39;showSubtasks&#39;</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>task<span class="token punctuation">.</span>subtasks<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span>subtask<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span>subtask<span class="token punctuation">.</span><span class="token function">hasTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">icon</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>style<span class="token punctuation">,</span> ListrDefaultRendererLogLevels<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>task<span class="token punctuation">.</span><span class="token function">isCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> task<span class="token punctuation">.</span>subtasks<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span>subtask<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> subtask<span class="token punctuation">.</span><span class="token function">hasFailed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">icon</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>style<span class="token punctuation">,</span> ListrDefaultRendererLogLevels<span class="token punctuation">.</span><span class="token constant">COMPLETED_WITH_FAILED_SUBTASKS</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>task<span class="token punctuation">.</span><span class="token function">hasFailed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">icon</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>style<span class="token punctuation">,</span> ListrDefaultRendererLogLevels<span class="token punctuation">.</span><span class="token constant">FAILED_WITH_FAILED_SUBTASKS</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>task<span class="token punctuation">.</span><span class="token function">isStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> task<span class="token punctuation">.</span><span class="token function">isPrompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">icon</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>style<span class="token punctuation">,</span> ListrDefaultRendererLogLevels<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">,</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token operator">?.</span>lazy <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>spinner<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>task<span class="token punctuation">.</span><span class="token function">isCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">icon</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>style<span class="token punctuation">,</span> ListrDefaultRendererLogLevels<span class="token punctuation">.</span><span class="token constant">COMPLETED</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>task<span class="token punctuation">.</span><span class="token function">isRetrying</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">icon</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>style<span class="token punctuation">,</span> ListrDefaultRendererLogLevels<span class="token punctuation">.</span><span class="token constant">RETRY</span><span class="token punctuation">,</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token operator">?.</span>lazy <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>spinner<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>task<span class="token punctuation">.</span><span class="token function">isRollingBack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">icon</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>style<span class="token punctuation">,</span> ListrDefaultRendererLogLevels<span class="token punctuation">.</span><span class="token constant">ROLLING_BACK</span><span class="token punctuation">,</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token operator">?.</span>lazy <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>spinner<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>task<span class="token punctuation">.</span><span class="token function">hasRolledBack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">icon</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>style<span class="token punctuation">,</span> ListrDefaultRendererLogLevels<span class="token punctuation">.</span><span class="token constant">ROLLED_BACK</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>task<span class="token punctuation">.</span><span class="token function">hasFailed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">icon</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>style<span class="token punctuation">,</span> ListrDefaultRendererLogLevels<span class="token punctuation">.</span><span class="token constant">FAILED</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">icon</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>style<span class="token punctuation">,</span> ListrDefaultRendererLogLevels<span class="token punctuation">.</span><span class="token constant">WAITING</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">protected</span> <span class="token function">format</span> <span class="token punctuation">(</span>message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> icon<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> level<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
    <span class="token comment">// we dont like empty data around here</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>

    message <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>icon<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
    <span class="token keyword">let</span> parsed<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span>

    <span class="token keyword">let</span> columns <span class="token operator">=</span> process<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>columns <span class="token operator">?</span> process<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>columns <span class="token operator">:</span> <span class="token number">80</span>

    columns <span class="token operator">=</span> columns <span class="token operator">-</span> level <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>indentation <span class="token operator">-</span> <span class="token number">2</span>

    <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>formatOutput<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token string">&#39;truncate&#39;</span><span class="token operator">:</span>
      parsed <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token constant">EOL</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">truncate</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">indent</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span> columns<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>

      <span class="token keyword">break</span>

    <span class="token keyword">case</span> <span class="token string">&#39;wrap&#39;</span><span class="token operator">:</span>
      parsed <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> columns<span class="token punctuation">,</span> <span class="token punctuation">{</span> hard<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token constant">EOL</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">indent</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>

      <span class="token keyword">break</span>

    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Format option for the renderer is wrong.&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// this removes the empty lines</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>removeEmptyLines<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      parsed <span class="token operator">=</span> parsed<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> parsed<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">indent</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> level <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>indentation<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">private</span> <span class="token function">renderer</span> <span class="token punctuation">(</span>tasks<span class="token operator">:</span> ListrDefaultRendererTasks<span class="token punctuation">,</span> level <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
    <span class="token comment">// eslint-disable-next-line complexity</span>
    <span class="token keyword">return</span> tasks<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> output<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>task<span class="token punctuation">.</span><span class="token function">isEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span>task<span class="token punctuation">.</span><span class="token function">isPrompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>activePrompt <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>activePrompt <span class="token operator">!==</span> task<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">PromptError</span><span class="token punctuation">(</span><span class="token string">&#39;Only one prompt can be active at the given time, please reevaluate your task design.&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>activePrompt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          task<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>ListrTaskEventType<span class="token punctuation">.</span><span class="token constant">PROMPT</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>prompt<span class="token operator">:</span> ListrTaskEventMap<span class="token punctuation">[</span>ListrTaskEventType<span class="token punctuation">.</span><span class="token constant">PROMPT</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> cleansed <span class="token operator">=</span> <span class="token function">cleanseAnsi</span><span class="token punctuation">(</span>prompt<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>cleansed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token keyword">this</span><span class="token punctuation">.</span>prompt <span class="token operator">=</span> cleansed
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>

          task<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>ListrTaskEventType<span class="token punctuation">.</span><span class="token constant">STATE</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">===</span> ListrTaskState<span class="token punctuation">.</span><span class="token constant">PROMPT_COMPLETED</span> <span class="token operator">||</span> task<span class="token punctuation">.</span><span class="token function">hasFinalized</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> task<span class="token punctuation">.</span><span class="token function">hasReset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token keyword">this</span><span class="token punctuation">.</span>prompt <span class="token operator">=</span> <span class="token keyword">null</span>
              <span class="token keyword">this</span><span class="token punctuation">.</span>activePrompt <span class="token operator">=</span> <span class="token keyword">null</span>
              task<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span>ListrTaskEventType<span class="token punctuation">.</span><span class="token constant">PROMPT</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>

          <span class="token keyword">this</span><span class="token punctuation">.</span>activePrompt <span class="token operator">=</span> task<span class="token punctuation">.</span>id
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>

      <span class="token comment">// Current Task Title</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>task<span class="token punctuation">.</span><span class="token function">hasTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>tasks<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> task<span class="token punctuation">.</span><span class="token function">hasFailed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>task<span class="token punctuation">.</span><span class="token function">hasFailed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> task<span class="token punctuation">.</span>options<span class="token punctuation">.</span>exitOnError <span class="token operator">!==</span> <span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span><span class="token function">isCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> task<span class="token punctuation">.</span><span class="token function">isSkipped</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// if task is skipped</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>task<span class="token punctuation">.</span><span class="token function">hasFailed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSelfOrParentOption</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> <span class="token string">&#39;collapseErrors&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// current task title and skip change the title</span>
            output<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>
              <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>
                <span class="token operator">!</span>task<span class="token punctuation">.</span><span class="token function">hasSubtasks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> task<span class="token punctuation">.</span>message<span class="token punctuation">.</span>error <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSelfOrParentOption</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> <span class="token string">&#39;showErrorMessage&#39;</span><span class="token punctuation">)</span> <span class="token operator">?</span> task<span class="token punctuation">.</span>message<span class="token punctuation">.</span>error <span class="token operator">:</span> task<span class="token punctuation">.</span>title<span class="token punctuation">,</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">style</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">,</span>
                level
              <span class="token punctuation">)</span>
            <span class="token punctuation">)</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>task<span class="token punctuation">.</span><span class="token function">isSkipped</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSelfOrParentOption</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> <span class="token string">&#39;collapseSkips&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// current task title and skip change the title</span>
            output<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>
              <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">suffix</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span>message<span class="token punctuation">.</span>skip <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSelfOrParentOption</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> <span class="token string">&#39;showSkipMessage&#39;</span><span class="token punctuation">)</span> <span class="token operator">?</span> task<span class="token punctuation">.</span>message<span class="token punctuation">.</span>skip <span class="token operator">:</span> task<span class="token punctuation">.</span>title<span class="token punctuation">,</span> <span class="token punctuation">{</span>
                  field<span class="token operator">:</span> LogLevels<span class="token punctuation">.</span><span class="token constant">SKIPPED</span><span class="token punctuation">,</span>
                  condition<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSelfOrParentOption</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> <span class="token string">&#39;suffixSkips&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                  <span class="token function-variable function">format</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> color<span class="token punctuation">.</span>dim
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">style</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">,</span>
                level
              <span class="token punctuation">)</span>
            <span class="token punctuation">)</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>task<span class="token punctuation">.</span><span class="token function">isRetrying</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSelfOrParentOption</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> <span class="token string">&#39;suffixRetries&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            output<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>
              <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">suffix</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span>title<span class="token punctuation">,</span> <span class="token punctuation">{</span>
                  field<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>LogLevels<span class="token punctuation">.</span><span class="token constant">RETRY</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>task<span class="token punctuation">.</span>message<span class="token punctuation">.</span>retry<span class="token punctuation">.</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
                  <span class="token function-variable function">format</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> color<span class="token punctuation">.</span>yellow
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">style</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">,</span>
                level
              <span class="token punctuation">)</span>
            <span class="token punctuation">)</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>task<span class="token punctuation">.</span><span class="token function">isCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> task<span class="token punctuation">.</span><span class="token function">hasTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">assertFunctionOrSelf</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSelfOrParentOption</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> <span class="token string">&#39;timer&#39;</span><span class="token punctuation">)</span><span class="token operator">?.</span>condition<span class="token punctuation">,</span> task<span class="token punctuation">.</span>message<span class="token punctuation">.</span>duration<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// task with timer</span>
            output<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>
              <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">suffix</span><span class="token punctuation">(</span>task<span class="token operator">?.</span>title<span class="token punctuation">,</span> <span class="token punctuation">{</span>
                  <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSelfOrParentOption</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> <span class="token string">&#39;timer&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                  args<span class="token operator">:</span> <span class="token punctuation">[</span> task<span class="token punctuation">.</span>message<span class="token punctuation">.</span>duration <span class="token punctuation">]</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">style</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">,</span>
                level
              <span class="token punctuation">)</span>
            <span class="token punctuation">)</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// normal state</span>
            output<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span>title<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">style</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">,</span> level<span class="token punctuation">)</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token comment">// some sibling task but self has failed and this has stopped</span>
          output<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span>title<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">icon</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>style<span class="token punctuation">,</span> ListrDefaultRendererLogLevels<span class="token punctuation">.</span><span class="token constant">COMPLETED_WITH_FAILED_SISTER_TASKS</span><span class="token punctuation">)</span><span class="token punctuation">,</span> level<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>

      <span class="token comment">// task should not have subtasks since subtasks will handle the error already</span>
      <span class="token comment">// maybe it is a better idea to show the error or skip messages when show subtasks is disabled.</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>task<span class="token punctuation">.</span><span class="token function">hasSubtasks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSelfOrParentOption</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> <span class="token string">&#39;showSubtasks&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// without the collapse option for skip and errors</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>
          task<span class="token punctuation">.</span><span class="token function">hasFailed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSelfOrParentOption</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> <span class="token string">&#39;collapseErrors&#39;</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span>
          <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSelfOrParentOption</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> <span class="token string">&#39;showErrorMessage&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSelfOrParentOption</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> <span class="token string">&#39;showSubtasks&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// show skip data if collapsing is not defined</span>
          output<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">dump</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> level<span class="token punctuation">,</span> LogLevels<span class="token punctuation">.</span><span class="token constant">FAILED</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>
          task<span class="token punctuation">.</span><span class="token function">isSkipped</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSelfOrParentOption</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> <span class="token string">&#39;collapseSkips&#39;</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span>
          <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSelfOrParentOption</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> <span class="token string">&#39;showSkipMessage&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSelfOrParentOption</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> <span class="token string">&#39;showSubtasks&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// show skip data if collapsing is not defined</span>
          output<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">dump</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> level<span class="token punctuation">,</span> LogLevels<span class="token punctuation">.</span><span class="token constant">SKIPPED</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>

      <span class="token comment">// Current Task Output</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>task<span class="token operator">?.</span>output<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isBottomBar</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>task<span class="token punctuation">.</span><span class="token function">hasTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// data output to bottom bar</span>
          <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">dump</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>

          <span class="token comment">// create new if there is no persistent storage created for bottom bar</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>bottom<span class="token punctuation">[</span>task<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>bottom<span class="token punctuation">[</span>task<span class="token punctuation">.</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>bottom<span class="token punctuation">[</span>task<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

            <span class="token keyword">const</span> bottomBar <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getTaskOptions</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">.</span>bottomBar

            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> bottomBar <span class="token operator">===</span> <span class="token string">&#39;boolean&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token keyword">this</span><span class="token punctuation">.</span>bottom<span class="token punctuation">[</span>task<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>items <span class="token operator">=</span> <span class="token number">1</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
              <span class="token keyword">this</span><span class="token punctuation">.</span>bottom<span class="token punctuation">[</span>task<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>items <span class="token operator">=</span> bottomBar
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>

          <span class="token comment">// persistent bottom bar and limit items in it</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>bottom<span class="token punctuation">[</span>task<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token operator">?.</span>data<span class="token operator">?.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> data<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>task<span class="token punctuation">.</span><span class="token function">isSkipped</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>bottom<span class="token punctuation">[</span>task<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>data<span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>task<span class="token punctuation">.</span><span class="token function">isPending</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hasPersistentOutput</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// keep output if persistent output is set</span>
          output<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">dump</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> level<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>

      <span class="token comment">// render subtasks, some complicated conditionals going on</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>
        <span class="token comment">// check if renderer option is on first</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSelfOrParentOption</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> <span class="token string">&#39;showSubtasks&#39;</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span>
        <span class="token comment">// if it doesnt have subtasks no need to check</span>
        task<span class="token punctuation">.</span><span class="token function">hasSubtasks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
        <span class="token punctuation">(</span>task<span class="token punctuation">.</span><span class="token function">isPending</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span>
          task<span class="token punctuation">.</span><span class="token function">hasFinalized</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>task<span class="token punctuation">.</span><span class="token function">hasTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span>
          <span class="token comment">// have to be completed and have subtasks</span>
          task<span class="token punctuation">.</span><span class="token function">isCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSelfOrParentOption</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> <span class="token string">&#39;collapse&#39;</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>task<span class="token punctuation">.</span>subtasks<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span>subtask<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> subtask<span class="token punctuation">.</span>rendererOptions<span class="token punctuation">.</span>collapse <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">||</span>
          <span class="token comment">// if any of the subtasks have the collapse option of</span>
          task<span class="token punctuation">.</span>subtasks<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span>subtask<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> subtask<span class="token punctuation">.</span>rendererOptions<span class="token punctuation">.</span>collapse <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">||</span>
          <span class="token comment">// if any of the subtasks has failed</span>
          task<span class="token punctuation">.</span>subtasks<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span>subtask<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> subtask<span class="token punctuation">.</span><span class="token function">hasFailed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span>
          <span class="token comment">// if any of the subtasks rolled back</span>
          task<span class="token punctuation">.</span>subtasks<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span>subtask<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> subtask<span class="token punctuation">.</span><span class="token function">hasRolledBack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// set level</span>
        <span class="token keyword">const</span> subtaskLevel <span class="token operator">=</span> <span class="token operator">!</span>task<span class="token punctuation">.</span><span class="token function">hasTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> level <span class="token operator">:</span> level <span class="token operator">+</span> <span class="token number">1</span>

        <span class="token comment">// render the subtasks as in the same way</span>
        <span class="token keyword">const</span> subtaskRender <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">renderer</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span>subtasks<span class="token punctuation">,</span> subtaskLevel<span class="token punctuation">)</span>

        output<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>subtaskRender<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>

      <span class="token comment">// after task is finished actions</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>task<span class="token punctuation">.</span><span class="token function">hasFinalized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// clean up bottom bar items if not indicated otherwise</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hasPersistentOutput</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">delete</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bottom<span class="token punctuation">[</span>task<span class="token punctuation">.</span>id<span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">return</span> output
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">private</span> <span class="token function">renderBottomBar</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
    <span class="token comment">// parse through all objects return only the last mentioned items</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>bottom<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>bottom <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>bottom<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">reduce</span><span class="token generic class-name"><span class="token operator">&lt;</span>Record<span class="token operator">&lt;</span>PropertyKey<span class="token punctuation">,</span> <span class="token punctuation">{</span> data<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> items<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>o<span class="token operator">?.</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        o<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
      <span class="token punctuation">}</span>

      o<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bottom<span class="token punctuation">[</span>key<span class="token punctuation">]</span>

      <span class="token keyword">this</span><span class="token punctuation">.</span>bottom<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bottom<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token keyword">this</span><span class="token punctuation">.</span>bottom<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>items<span class="token punctuation">)</span>
      o<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bottom<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>data

      <span class="token keyword">return</span> o
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>bottom<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> o <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token operator">...</span>o<span class="token punctuation">,</span> <span class="token operator">...</span>value<span class="token punctuation">.</span>data <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">private</span> <span class="token function">renderPrompt</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>prompt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token punctuation">[</span> <span class="token keyword">this</span><span class="token punctuation">.</span>prompt <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">private</span> <span class="token function">dump</span> <span class="token punctuation">(</span>task<span class="token operator">:</span> Task<span class="token operator">&lt;</span>ListrContext<span class="token punctuation">,</span> <span class="token keyword">typeof</span> DefaultRenderer<span class="token operator">&gt;</span><span class="token punctuation">,</span> level<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> source<span class="token operator">:</span> LogLevels<span class="token punctuation">.</span><span class="token constant">OUTPUT</span> <span class="token operator">|</span> LogLevels<span class="token punctuation">.</span><span class="token constant">SKIPPED</span> <span class="token operator">|</span> LogLevels<span class="token punctuation">.</span><span class="token constant">FAILED</span> <span class="token operator">=</span> LogLevels<span class="token punctuation">.</span><span class="token constant">OUTPUT</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> data<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">boolean</span>

    <span class="token keyword">switch</span> <span class="token punctuation">(</span>source<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> LogLevels<span class="token punctuation">.</span><span class="token constant">OUTPUT</span><span class="token operator">:</span>
      data <span class="token operator">=</span> <span class="token function">cleanseAnsi</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span>output<span class="token punctuation">)</span>

      <span class="token keyword">break</span>

    <span class="token keyword">case</span> LogLevels<span class="token punctuation">.</span><span class="token constant">SKIPPED</span><span class="token operator">:</span>
      data <span class="token operator">=</span> task<span class="token punctuation">.</span>message<span class="token punctuation">.</span>skip

      <span class="token keyword">break</span>

    <span class="token keyword">case</span> LogLevels<span class="token punctuation">.</span><span class="token constant">FAILED</span><span class="token operator">:</span>
      data <span class="token operator">=</span> task<span class="token punctuation">.</span>message<span class="token punctuation">.</span>error

      <span class="token keyword">break</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// dont return anything on some occasions</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>task<span class="token punctuation">.</span><span class="token function">hasTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> source <span class="token operator">===</span> LogLevels<span class="token punctuation">.</span><span class="token constant">FAILED</span> <span class="token operator">&amp;&amp;</span> data <span class="token operator">===</span> task<span class="token punctuation">.</span>title<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> data <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">style</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span> level <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">private</span> <span class="token function">indent</span> <span class="token punctuation">(</span>str<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> i<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token function">indent</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">:</span> str<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),w=n("h2",{id:"utilizing-the-events",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#utilizing-the-events","aria-hidden":"true"},"#"),s(" Utilizing the Events")],-1),f=n("p",null,[s("Take a look at "),n("a",{href:"/renderer/verbose.html",target:"_blank"},"VerboseRenderer"),s(" since it is implemented this way.")],-1),g={class:"hint-container details"},h=t(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> ListrVerboseRendererOptions<span class="token punctuation">,</span> ListrVerboseRendererTasks<span class="token punctuation">,</span> VerboseRendererOptions<span class="token punctuation">,</span> VerboseRendererTaskOptions <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./renderer.interface&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ListrTaskEventType<span class="token punctuation">,</span> ListrTaskState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@constants&#39;</span>
<span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> ListrRenderer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@interfaces&#39;</span>
<span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> Task <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@lib&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ListrLogger<span class="token punctuation">,</span> cleanseAnsi <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@utils&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">VerboseRenderer</span> <span class="token keyword">implements</span> <span class="token class-name">ListrRenderer</span> <span class="token punctuation">{</span>
  <span class="token doc-comment comment">/** designates whether this renderer can output to a non-tty console */</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> nonTTY <span class="token operator">=</span> <span class="token boolean">true</span>
  <span class="token doc-comment comment">/** renderer options for the verbose renderer */</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> rendererOptions<span class="token operator">:</span> VerboseRendererOptions <span class="token operator">=</span> <span class="token punctuation">{</span>
    logTitleChange<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    logger<span class="token operator">:</span> ListrLogger
  <span class="token punctuation">}</span>
  <span class="token doc-comment comment">/** per task options for the verbose renderer */</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> rendererTaskOptions<span class="token operator">:</span> VerboseRendererTaskOptions

  <span class="token keyword">private</span> logger<span class="token operator">:</span> ListrLogger

  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">readonly</span> tasks<span class="token operator">:</span> ListrVerboseRendererTasks<span class="token punctuation">,</span> <span class="token keyword">private</span> <span class="token keyword">readonly</span> options<span class="token operator">:</span> ListrVerboseRendererOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>options <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token operator">...</span>VerboseRenderer<span class="token punctuation">.</span>rendererOptions<span class="token punctuation">,</span>
      loggerOptions<span class="token operator">:</span> <span class="token punctuation">{</span>
        useIcons<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        fieldOptions<span class="token operator">:</span> <span class="token punctuation">{</span>
          prefix<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>timestamp <span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>options
    <span class="token punctuation">}</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>logger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token keyword">this</span></span><span class="token punctuation">.</span>options<span class="token punctuation">.</span><span class="token function">logger</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>loggerOptions<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token function">render</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">renderer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tasks<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// eslint-disable-next-line @typescript-eslint/no-empty-function</span>
  <span class="token keyword">public</span> <span class="token function">end</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token generic-function"><span class="token function">getSelfOrParentOption</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> ListrVerboseRendererOptions<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>task<span class="token operator">:</span> Task<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span> VerboseRenderer<span class="token operator">&gt;</span><span class="token punctuation">,</span> key<span class="token operator">:</span> <span class="token constant">K</span><span class="token punctuation">)</span><span class="token operator">:</span> ListrVerboseRendererOptions<span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> task<span class="token operator">?.</span>rendererOptions<span class="token operator">?.</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">??</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token operator">?.</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// verbose renderer multi-level</span>
  <span class="token keyword">private</span> <span class="token function">renderer</span> <span class="token punctuation">(</span>tasks<span class="token operator">:</span> ListrVerboseRendererTasks<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> tasks<span class="token operator">?.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      task<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>ListrTaskEventType<span class="token punctuation">.</span><span class="token constant">SUBTASK</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>subtasks<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">renderer</span><span class="token punctuation">(</span>subtasks<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>

      task<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>ListrTaskEventType<span class="token punctuation">.</span><span class="token constant">STATE</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>task<span class="token punctuation">.</span><span class="token function">hasTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">===</span> ListrTaskState<span class="token punctuation">.</span><span class="token constant">STARTED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">started</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span>title<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">===</span> ListrTaskState<span class="token punctuation">.</span><span class="token constant">COMPLETED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> timer <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSelfOrParentOption</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> <span class="token string">&#39;timer&#39;</span><span class="token punctuation">)</span>

          <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">completed</span><span class="token punctuation">(</span>
            task<span class="token punctuation">.</span>title<span class="token punctuation">,</span>
            timer <span class="token operator">&amp;&amp;</span> <span class="token punctuation">{</span>
              suffix<span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token operator">...</span>timer<span class="token punctuation">,</span>
                condition<span class="token operator">:</span> <span class="token operator">!</span><span class="token operator">!</span>task<span class="token punctuation">.</span>message<span class="token operator">?.</span>duration <span class="token operator">&amp;&amp;</span> timer<span class="token punctuation">.</span>condition<span class="token punctuation">,</span>
                args<span class="token operator">:</span> <span class="token punctuation">[</span> task<span class="token punctuation">.</span>message<span class="token punctuation">.</span>duration <span class="token punctuation">]</span>
              <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>

      task<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>ListrTaskEventType<span class="token punctuation">.</span><span class="token constant">OUTPUT</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">output</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>

      task<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>ListrTaskEventType<span class="token punctuation">.</span><span class="token constant">PROMPT</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>prompt<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> cleansed <span class="token operator">=</span> <span class="token function">cleanseAnsi</span><span class="token punctuation">(</span>prompt<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>cleansed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span>cleansed<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token operator">?.</span>logTitleChange <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        task<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>ListrTaskEventType<span class="token punctuation">.</span><span class="token constant">TITLE</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>title<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>

      task<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>ListrTaskEventType<span class="token punctuation">.</span><span class="token constant">MESSAGE</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token operator">?.</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// error message</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">failed</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>error<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token operator">?.</span>skip<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// skip message</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">skipped</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>skip<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token operator">?.</span>rollback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// rollback message</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>rollback<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token operator">?.</span>retry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">retry</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span>title<span class="token punctuation">,</span> <span class="token punctuation">{</span> suffix<span class="token operator">:</span> message<span class="token punctuation">.</span>retry<span class="token punctuation">.</span>count<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),L={id:"using-render-hooks-v2-1-0",tabindex:"-1"},T=n("a",{class:"header-anchor",href:"#using-render-hooks-v2-1-0","aria-hidden":"true"},"#",-1),O=n("a",{href:"/api/classes/Listr.html",target:"_blank"},"Listr",-1),R=n("code",null,"events",-1),E=n("code",null,"ListrEventType.SHOULD_REFRESH_RENDER",-1),S=t(`<p>These <code>events</code> can be the third optional variable of a given renderer while using it is always optional.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">MyAmazingRenderer</span> <span class="token keyword">implements</span> <span class="token class-name">ListrRenderer</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">readonly</span> tasks<span class="token operator">:</span> ListrDefaultRendererTasks<span class="token punctuation">,</span> <span class="token keyword">private</span> <span class="token keyword">readonly</span> options<span class="token operator">:</span> ListrDefaultRendererOptions<span class="token punctuation">,</span> <span class="token keyword">private</span> <span class="token keyword">readonly</span> events<span class="token operator">:</span> ListrEventManager<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>These events can be later listened to trigger an update.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>ListrEventType<span class="token punctuation">.</span><span class="token constant">SHOULD_REFRESH_RENDER</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="using-a-custom-renderer" tabindex="-1"><a class="header-anchor" href="#using-a-custom-renderer" aria-hidden="true">#</a> Using a Custom Renderer</h2><p>You can tell Listr to use your custom renderer by setting the <code>renderer</code> option in <a href="/api/classes/Listr.html" target="_blank">Listr</a> to your custom renderer.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>
  <span class="token comment">// get tasks to be rendered and options of the renderer from the parent</span>
  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token keyword">public</span> tasks<span class="token operator">:</span> MyAmazingRendererTasks<span class="token punctuation">,</span> <span class="token keyword">public</span> options<span class="token operator">:</span> MyAmazingRendererOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token comment">// implement custom logic for render functionality</span>
  <span class="token keyword">public</span> <span class="token function">render</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token comment">// implement custom logic for end functionality</span>
  <span class="token keyword">public</span> <span class="token function">end</span> <span class="token punctuation">(</span>err<span class="token operator">:</span> Error<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> tasks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Listr</span><span class="token punctuation">(</span>
  <span class="token punctuation">[</span>
    <span class="token comment">/* Array of task objects */</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> renderer<span class="token operator">:</span> MyAmazingRenderer <span class="token punctuation">}</span>
<span class="token punctuation">)</span>

<span class="token keyword">await</span> tasks<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7);function _(P,D){const p=o("FontIcon"),c=o("Badge"),l=o("RouterLink");return u(),k("div",null,[v,r(" more "),m,n("details",b,[n("summary",null,[a(p,{icon:"material-symbols:code-blocks-outline"}),s(" Code Example")]),y]),w,f,n("details",g,[n("summary",null,[a(p,{icon:"material-symbols:code-blocks-outline"}),s(" Code Example")]),h]),n("h2",L,[T,s(" Using Render Hooks "),a(c,null,{default:e(()=>[a(p,{icon:"mdi:tag-text-outline"}),s("v2.1.0")]),_:1})]),n("p",null,[s("Additional to listening to the events, another singleton hook that come from the root "),O,s(" is "),R,s(". This provides some generic events like "),a(l,{to:"/api/enums/ListrEventType.html#should-refresh-render"},{default:e(()=>[E]),_:1}),s(" which can be used to trigger an update on an updating renderer.")]),S])}const B=i(d,[["render",_],["__file","custom.html.vue"]]);export{B as default};
