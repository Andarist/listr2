import{_ as o,W as a,X as d,Y as e,Z as n,a2 as i,$ as t,a5 as s,D as c}from"./framework-4c9bc095.js";const l={},h=e("h1",{id:"interface-listrsubclassoptions-ctx-renderer",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#interface-listrsubclassoptions-ctx-renderer","aria-hidden":"true"},"#"),t(" Interface: ListrSubClassOptions<Ctx, Renderer>")],-1),p=e("p",null,"Sub class options.",-1),f=e("p",null,"Subtasks has reduced set options where the missing ones are explicitly set by the base class.",-1),u=e("h2",{id:"type-parameters",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#type-parameters","aria-hidden":"true"},"#"),t(" Type parameters")],-1),_=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type")])],-1),m=e("td",{style:{"text-align":"left"}},[e("code",null,"Ctx")],-1),x={style:{"text-align":"left"}},b=e("code",null,"ListrContext",-1),g=e("td",{style:{"text-align":"left"}},[e("code",null,"Renderer")],-1),y={style:{"text-align":"left"}},O=e("code",null,"ListrRendererValue",-1),k=e("code",null,"ListrDefaultRendererValue",-1),L=e("h2",{id:"hierarchy",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#hierarchy","aria-hidden":"true"},"#"),t(" Hierarchy")],-1),D=e("code",null,"Omit",-1),R=e("code",null,"ListrOptions",-1),C=e("code",null,"Ctx",-1),w=e("code",null,'"registerSignalListeners"',-1),I=e("code",null,'"rendererFallback"',-1),T=e("code",null,'"rendererSilent"',-1),j=e("code",null,'"disableColor"',-1),E=e("code",null,'"forceColor"',-1),S=e("code",null,'"forceTTY"',-1),V=e("code",null,'"forceUnicode"',-1),q=e("code",null,"Omit",-1),v=e("code",null,"ListrPrimaryRendererOptions",-1),N=e("code",null,"Renderer",-1),W=e("code",null,'"renderer"',-1),A=e("p",null,[t("↳ "),e("strong",null,[e("code",null,"ListrSubClassOptions")])],-1),B=s('<h2 id="properties" tabindex="-1"><a class="header-anchor" href="#properties" aria-hidden="true">#</a> Properties</h2><h3 id="ctx" tabindex="-1"><a class="header-anchor" href="#ctx" aria-hidden="true">#</a> ctx</h3><p>• <code>Optional</code> <strong>ctx</strong>: <code>Ctx</code></p><p>To inject a context through this options wrapper. Context can also be defined in run time.</p><p><strong><code>Default</code></strong></p><h4 id="inherited-from" tabindex="-1"><a class="header-anchor" href="#inherited-from" aria-hidden="true">#</a> Inherited from</h4><p>Omit.ctx</p><h4 id="defined-in" tabindex="-1"><a class="header-anchor" href="#defined-in" aria-hidden="true">#</a> Defined in</h4><p>src/interfaces/listr.interface.ts:17</p><hr><h3 id="concurrent" tabindex="-1"><a class="header-anchor" href="#concurrent" aria-hidden="true">#</a> concurrent</h3><p>• <code>Optional</code> <strong>concurrent</strong>: <code>number</code> | <code>boolean</code></p><p>Concurrency sets how many tasks will be run at the same time in parallel.</p><p><strong><code>Default</code></strong></p><p>false &gt; Default is to run everything synchronously.</p><p><code>true</code> will set it to <code>Infinity</code>, <code>false</code> will set it to synchronous.</p><p>If you pass in a <code>number</code> it will limit it to that number.</p><h4 id="inherited-from-1" tabindex="-1"><a class="header-anchor" href="#inherited-from-1" aria-hidden="true">#</a> Inherited from</h4><p>Omit.concurrent</p><h4 id="defined-in-1" tabindex="-1"><a class="header-anchor" href="#defined-in-1" aria-hidden="true">#</a> Defined in</h4><p>src/interfaces/listr.interface.ts:27</p><hr><h3 id="exitonerror" tabindex="-1"><a class="header-anchor" href="#exitonerror" aria-hidden="true">#</a> exitOnError</h3><p>• <code>Optional</code> <strong>exitOnError</strong>: <code>boolean</code></p><p>Determine the default behavior of exiting on errors.</p><p><strong><code>Default</code></strong></p><p>true &gt; exit on any error coming from the tasks.</p><h4 id="inherited-from-2" tabindex="-1"><a class="header-anchor" href="#inherited-from-2" aria-hidden="true">#</a> Inherited from</h4><p>Omit.exitOnError</p><h4 id="defined-in-2" tabindex="-1"><a class="header-anchor" href="#defined-in-2" aria-hidden="true">#</a> Defined in</h4><p>src/interfaces/listr.interface.ts:33</p><hr><h3 id="exitafterrollback" tabindex="-1"><a class="header-anchor" href="#exitafterrollback" aria-hidden="true">#</a> exitAfterRollback</h3><p>• <code>Optional</code> <strong>exitAfterRollback</strong>: <code>boolean</code></p><p>Determine the behavior of exiting after rollback actions.</p><p>This is independent of exitOnError, since failure of a rollback can be a more critical operation comparing to failing a single task.</p><p><strong><code>Default</code></strong></p><p>true &gt; exit after rolling back tasks</p><h4 id="inherited-from-3" tabindex="-1"><a class="header-anchor" href="#inherited-from-3" aria-hidden="true">#</a> Inherited from</h4><p>Omit.exitAfterRollback</p><h4 id="defined-in-3" tabindex="-1"><a class="header-anchor" href="#defined-in-3" aria-hidden="true">#</a> Defined in</h4><p>src/interfaces/listr.interface.ts:42</p><hr><h3 id="collecterrors" tabindex="-1"><a class="header-anchor" href="#collecterrors" aria-hidden="true">#</a> collectErrors</h3><p>• <code>Optional</code> <strong>collectErrors</strong>: <code>false</code> | <code>&quot;minimal&quot;</code> | <code>&quot;full&quot;</code></p><p>Collects errors to <code>ListrInstance.errors</code></p><p>This can take up a lot of memory, so disabling it can fix out-of-memory errors</p><ul><li>&#39;full&#39; will clone the current context and task in to the error instance</li><li>&#39;minimal&#39; will only collect the error message and the location</li><li>false will collect no errors</li></ul><p><strong><code>Default</code></strong></p><p>&#39;minimal&#39;</p><h4 id="inherited-from-4" tabindex="-1"><a class="header-anchor" href="#inherited-from-4" aria-hidden="true">#</a> Inherited from</h4><p>Omit.collectErrors</p><h4 id="defined-in-4" tabindex="-1"><a class="header-anchor" href="#defined-in-4" aria-hidden="true">#</a> Defined in</h4><p>src/interfaces/listr.interface.ts:54</p><hr><h3 id="injectwrapper" tabindex="-1"><a class="header-anchor" href="#injectwrapper" aria-hidden="true">#</a> injectWrapper</h3><p>• <code>Optional</code> <strong>injectWrapper</strong>: <code>Object</code></p><p>Inject data directly to TaskWrapper.</p><h4 id="type-declaration" tabindex="-1"><a class="header-anchor" href="#type-declaration" aria-hidden="true">#</a> Type declaration</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>enquirer?</code></td><td style="text-align:left;"><code>Enquirer</code>&lt;<code>object</code>&gt;</td></tr></tbody></table><h4 id="inherited-from-5" tabindex="-1"><a class="header-anchor" href="#inherited-from-5" aria-hidden="true">#</a> Inherited from</h4><p>Omit.injectWrapper</p><h4 id="defined-in-5" tabindex="-1"><a class="header-anchor" href="#defined-in-5" aria-hidden="true">#</a> Defined in</h4><p>src/interfaces/listr.interface.ts:100</p><hr><h3 id="rendereroptions" tabindex="-1"><a class="header-anchor" href="#rendereroptions" aria-hidden="true">#</a> rendererOptions</h3>',66),P=e("code",null,"Optional",-1),G=e("strong",null,"rendererOptions",-1),Y=e("code",null,"ListrGetRendererOptions",-1),F=e("code",null,"Renderer",-1),H=e("p",null,"Renderer options depending on the current renderer",-1),U=e("h4",{id:"inherited-from-6",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#inherited-from-6","aria-hidden":"true"},"#"),t(" Inherited from")],-1),X=e("p",null,"Omit.rendererOptions",-1),Z=e("h4",{id:"defined-in-6",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-6","aria-hidden":"true"},"#"),t(" Defined in")],-1),$=e("p",null,"src/interfaces/renderer.interface.ts:86",-1);function z(J,K){const r=c("RouterLink");return a(),d("div",null,[h,p,f,u,e("table",null,[_,e("tbody",null,[e("tr",null,[m,e("td",x,[n(r,{to:"/api/types/ListrContext.html"},{default:i(()=>[b]),_:1})])]),e("tr",null,[g,e("td",y,[t("extends "),n(r,{to:"/api/types/ListrRendererValue.html"},{default:i(()=>[O]),_:1}),t(" = "),n(r,{to:"/api/types/ListrDefaultRendererValue.html"},{default:i(()=>[k]),_:1})])])])]),L,e("ul",null,[e("li",null,[e("p",null,[D,t("<"),n(r,{to:"/api/interfaces/ListrOptions.html"},{default:i(()=>[R]),_:1}),t("<"),C,t(">, "),w,t(" | "),I,t(" | "),T,t(" | "),j,t(" | "),E,t(" | "),S,t(" | "),V,t(">")])]),e("li",null,[e("p",null,[q,t("<"),n(r,{to:"/api/interfaces/ListrPrimaryRendererOptions.html"},{default:i(()=>[v]),_:1}),t("<"),N,t(">, "),W,t(">")]),A])]),B,e("p",null,[t("• "),P,t(),G,t(": "),n(r,{to:"/api/types/ListrGetRendererOptions.html"},{default:i(()=>[Y]),_:1}),t("<"),F,t(">")]),H,U,X,Z,$])}const Q=o(l,[["render",z],["__file","ListrSubClassOptions.html.vue"]]);export{Q as default};
