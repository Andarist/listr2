import{_ as l,W as r,X as u,a4 as k,Y as n,$ as s,Z as a,a2 as i,a5 as e,D as p}from"./framework-4c9bc095.js";const d={},b=n("p",null,[n("code",null,"listr2"),s(" can be infinitely nested by utilizing subtasks, which is the core part of the design.")],-1),v=e(`<p>A <a href="/api/interfaces/ListrTask.html#properties" target="_blank">Task</a> can return a new <a href="/api/classes/Listr.html" target="_blank">Listr</a>. But rather than calling it by invoking a <code>new Listr</code> to get the full auto-completion features depending on the parent task&#39;s selected renderer, it is mandatory to call it through the <a href="/api/interfaces/ListrTask.html#properties" target="_blank">Task</a> itself by <code>task.newListr()</code> since they are sharing components internally that makes the application tick.</p><p>Subtasks can be nested indefinitely as long as the terminal width is enough to support them.</p><p>Subtasks give the advantage of grouping similar tasks, changing the behavior of <a href="/api/classes/Listr.html" target="_blank">Listr</a> for a certain set of tasks, or cleaning up the rendering area when certain tasks have finished.</p><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> tasks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Listr</span><span class="token punctuation">(</span>
  <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      title<span class="token operator">:</span> <span class="token string">&#39;This task will execute.&#39;</span><span class="token punctuation">,</span>
      task<span class="token operator">:</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token operator">:</span> Listr <span class="token operator">=&gt;</span>
        task<span class="token punctuation">.</span><span class="token function">newListr</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
          <span class="token punctuation">{</span>
            title<span class="token operator">:</span> <span class="token string">&#39;This is a subtask.&#39;</span><span class="token punctuation">,</span>
            task<span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
              <span class="token keyword">await</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> concurrent<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>
<span class="token punctuation">)</span>

<span class="token keyword">await</span> tasks<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><div class="highlight-line">Â </div><br><br><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),h={class:"hint-container info"},m=n("p",{class:"hint-container-title"},"Example",-1),g={href:"https://github.com/cenk1cenk2/listr2/tree/master/examples/subtasks.example.ts",target:"_blank",rel:"noopener noreferrer"},f=e('<h2 id="overwriting-the-default-behavior-through-subtask-options" tabindex="-1"><a class="header-anchor" href="#overwriting-the-default-behavior-through-subtask-options" aria-hidden="true">#</a> Overwriting the Default Behavior Through Subtask Options</h2><p>You can change the behavior of <a href="/api/classes/Listr.html" target="_blank">Listr</a>, and the selected renderer of the parent through the options of a subtask.</p><p>This includes selected renderer options as well as <strong>Listr</strong> options like <code>exitOnError</code>, <code>concurrent</code> to be set per-subtaskly independent of the parent task, while it will always <strong>inherit the defaults from the parent task</strong>.</p><p>Due to design limitations of making renderers a bit simpler, some of the options that cannot be changed from the renderer are marked as <code>@global</code> in the hover documentation. This is not disabled through typings due to keeping the renderer instances fully self-contained.</p>',4),y={class:"hint-container details"},w=e(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> tasks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Listr</span><span class="token punctuation">(</span>
  <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      title<span class="token operator">:</span> <span class="token string">&#39;This task will execute.&#39;</span><span class="token punctuation">,</span>
      task<span class="token operator">:</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token operator">:</span> Listr <span class="token operator">=&gt;</span>
        task<span class="token punctuation">.</span><span class="token function">newListr</span><span class="token punctuation">(</span>
          <span class="token punctuation">[</span>
            <span class="token punctuation">{</span>
              title<span class="token operator">:</span> <span class="token string">&#39;This is a subtask.&#39;</span><span class="token punctuation">,</span>
              task<span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">await</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span>
              <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span>
              title<span class="token operator">:</span> <span class="token string">&#39;This is an another subtask.&#39;</span><span class="token punctuation">,</span>
              task<span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">await</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span>
              <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token punctuation">{</span> concurrent<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> rendererOptions<span class="token operator">:</span> <span class="token punctuation">{</span> collapse<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
        <span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token punctuation">{</span>
      title<span class="token operator">:</span> <span class="token string">&#39;This task will execute.&#39;</span><span class="token punctuation">,</span>
      task<span class="token operator">:</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token operator">:</span> Listr <span class="token operator">=&gt;</span>
        task<span class="token punctuation">.</span><span class="token function">newListr</span><span class="token punctuation">(</span>
          <span class="token punctuation">[</span>
            <span class="token punctuation">{</span>
              title<span class="token operator">:</span> <span class="token string">&#39;This is a subtask.&#39;</span><span class="token punctuation">,</span>
              task<span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">await</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span>
              <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span>
              title<span class="token operator">:</span> <span class="token string">&#39;This is an another subtask.&#39;</span><span class="token punctuation">,</span>
              task<span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">await</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span>
              <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token punctuation">{</span> concurrent<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> rendererOptions<span class="token operator">:</span> <span class="token punctuation">{</span> collapse<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
        <span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> concurrent<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>
<span class="token punctuation">)</span>

<span class="token keyword">const</span> ctx <span class="token operator">=</span> <span class="token keyword">await</span> tasks<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><div class="highlight-line">Â </div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line">Â </div><br><br><br><br><br><br><div class="highlight-line">Â </div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line">Â </div><br><br><br><div class="highlight-line">Â </div></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),_={id:"access-parent-task-from-subtasks-v2-6-0-141",tabindex:"-1"},x=n("a",{class:"header-anchor",href:"#access-parent-task-from-subtasks-v2-6-0-141","aria-hidden":"true"},"#",-1),L=n("a",{href:"https://github.com/cenk1cenk2/listr2/issues/141",target:"_blank"},"#141",-1),T=n("p",null,[s("You can access the parent task class from subtasks by passing the function signature "),n("code",null,"(parent) => Listr"),s(" to "),n("code",null,"task.newListr"),s(". This way you can change the title of the parent task or access its functionality.")],-1),B={class:"hint-container details"},E=e(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> tasks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Listr</span><span class="token punctuation">(</span>
  <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      title<span class="token operator">:</span> <span class="token string">&#39;This task will execute.&#39;</span><span class="token punctuation">,</span>
      task<span class="token operator">:</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token operator">:</span> Listr <span class="token operator">=&gt;</span>
        task<span class="token punctuation">.</span><span class="token function">newListr</span><span class="token punctuation">(</span>
          <span class="token punctuation">(</span>parent<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
            <span class="token punctuation">{</span>
              title<span class="token operator">:</span> <span class="token string">&#39;This is a subtask.&#39;</span><span class="token punctuation">,</span>
              task<span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">await</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span>

                parent<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">&#39;I am changing the title from subtask.&#39;</span>
              <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token punctuation">{</span> concurrent<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>
        <span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> concurrent<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>
<span class="token punctuation">)</span>

<span class="token keyword">const</span> ctx <span class="token operator">=</span> <span class="token keyword">await</span> tasks<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><div class="highlight-line">Â </div><br><br><br><br><br><div class="highlight-line">Â </div><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function P(C,I){const c=p("ExternalLinkIcon"),t=p("FontIcon"),o=p("Badge");return r(),u("div",null,[b,k(" more "),v,n("div",h,[m,n("p",null,[s("You can find the related examples "),n("a",g,[s("here"),a(c)]),s(".")])]),f,n("details",y,[n("summary",null,[a(t,{icon:"material-symbols:code-blocks-outline"}),s(" Code Example")]),w]),n("h2",_,[x,s(" Access Parent Task from Subtasks "),a(o,null,{default:i(()=>[a(t,{icon:"mdi:tag-text-outline"}),s("v2.6.0")]),_:1}),a(o,{type:"warning"},{default:i(()=>[a(t,{icon:"mdi:github"}),L]),_:1})]),T,n("details",B,[n("summary",null,[a(t,{icon:"material-symbols:code-blocks-outline"}),s(" Code Example")]),E])])}const O=l(d,[["render",P],["__file","subtasks.html.vue"]]);export{O as default};
