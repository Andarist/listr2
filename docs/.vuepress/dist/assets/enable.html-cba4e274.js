import{_ as t,W as o,X as i,a4 as p,Y as n,$ as a,Z as l,a5 as s,D as r}from"./framework-4c9bc095.js";const c={},u=n("p",null,[n("a",{href:"/api/interfaces/ListrTask.html#properties",target:"_blank"},"Task"),a(" can be enabled depending on the variables programmatically. This enables the creation of tasks that are dependent on the context or outside conditions.")],-1),d=s('<div class="hint-container warning"><p class="hint-container-title">Note</p><p><a href="/api/interfaces/ListrTask.html#properties" target="_blank">Task</a> conditional enable is determined upon the initial run of the Listr when you create the class for a given <a href="/api/interfaces/ListrTask.html#properties" target="_blank">Task</a> or <a href="/task/subtasks.html" target="_blank">Subtask</a>, so be careful with using it while using internal context variables.</p><p>After the initial evaluation when the execution time comes for that particular <a href="/api/interfaces/ListrTask.html#properties" target="_blank">Task</a>, it will get re-evaluated.</p></div>',1),k={class:"hint-container info"},b=n("p",{class:"hint-container-title"},"Example",-1),v={href:"https://github.com/cenk1cenk2/listr2/tree/master/examples/task-enable.example.ts",target:"_blank",rel:"noopener noreferrer"},h=s(`<h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Ctx</span> <span class="token punctuation">{</span>
  enableSecondTask<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> tasks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Listr<span class="token operator">&lt;</span>Ctx<span class="token operator">&gt;</span></span><span class="token punctuation">(</span>
  <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      title<span class="token operator">:</span> <span class="token string">&#39;This task will execute.&#39;</span><span class="token punctuation">,</span>
      task<span class="token operator">:</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        ctx<span class="token punctuation">.</span>enableSecondTask <span class="token operator">=</span> <span class="token boolean">false</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token punctuation">{</span>
      title<span class="token operator">:</span> <span class="token string">&#39;This task will never execute.&#39;</span><span class="token punctuation">,</span>
      enabled<span class="token operator">:</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=&gt;</span> ctx<span class="token punctuation">.</span>enableSecondTask<span class="token punctuation">,</span>
      task<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> concurrent<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>
<span class="token punctuation">)</span>

<span class="token keyword">await</span> tasks<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line">Â </div><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="renderer" tabindex="-1"><a class="header-anchor" href="#renderer" aria-hidden="true">#</a> Renderer</h2><p>Disabled tasks will not be rendered.</p>`,4);function m(f,_){const e=r("ExternalLinkIcon");return o(),i("div",null,[u,p(" more "),d,n("div",k,[b,n("p",null,[a("You can find the related examples "),n("a",v,[a("here"),l(e)]),a(".")])]),h])}const x=t(c,[["render",m],["__file","enable.html.vue"]]);export{x as default};
